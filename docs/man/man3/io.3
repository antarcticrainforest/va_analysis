.TH "io" 3 "Tue Apr 17 2018" "Variational Analysis" \" -*- nroff -*-
.ad l
.nh
.SH NAME
io \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine \fBipt_vht\fP (INPUTFILE, INSTRUMENT, NV, NP, NST, NT, V, P, ST, T, D)"
.br
.ti -1c
.RI "subroutine \fBipt_ht\fP (INPUTFILE, INSTRUMENT, NV, NST, NT, V, ST, LON, LAT, T, D)"
.br
.ti -1c
.RI "subroutine \fBopt_vht_netcdf\fP (OUTPUTFILE, INSTRUMENT, NV, NP, NST, NT, V, P, ST, T, D)"
.br
.ti -1c
.RI "subroutine \fBopt_3d_netcdf\fP (OUTPUTFILE, DU, VU, DS, P, T, STN, WEIGHT, BOUNDARY, STRU, STRS)"
.br
.ti -1c
.RI "subroutine \fBipt_3d_netcdf\fP (INPUTFILE, DU, VU, DS, T, STN, WEIGHT, LEV, BOUNDARY, STRU, STRS)"
.br
.ti -1c
.RI "subroutine \fBopt_budget_netcdf\fP (OUTPUTFILE, BUDGET_COLUMN, BUDGET_LAYER, VBUDGET_COLUMN, VBUDGET_LAYER, AVE_QS, AVE_SS, P, T)"
.br
.ti -1c
.RI "subroutine \fBipt_budget_netcdf\fP (INPUTFILE, BUDGET_COLUMN, BUDGET_LAYER, VBUDGET_COLUMN, VBUDGET_LAYER, AVE_QS, AVE_SS, P, T)"
.br
.ti -1c
.RI "subroutine \fBopt_2d_netcdf\fP (OUTPUTFILE, T, BAR_PRES, ADPS, PRECIP, LPRECIP, EVAPOR, SHF, RL, RADIATIONT, RADIATIONB, RADIATION, TAOX, TAOY)"
.br
.ti -1c
.RI "subroutine \fBipt_2d_netcdf\fP (INPUTFILE, T, BAR_PRES, ADPS, PRECIP, LPRECIP, EVAPOR, SHF, RL, RADIATIONT, RADIATIONB, RADIATION, TAOX, TAOY)"
.br
.ti -1c
.RI "subroutine \fBipt_2draw_netcdf\fP (INPUTFILE, VAR_NAME, VAR)"
.br
.ti -1c
.RI "subroutine \fBopt_forcing_netcdf\fP (OUTPUTFILE, SFC_DATA, ML_DATA, CF_LON, CF_LAT, CF_PHIS, PLEVS)"
.br
.in -1c
.SH "Function/Subroutine Documentation"
.PP 
.SS "subroutine io::ipt_2d_netcdf (character (len=*), intent(in) INPUTFILE, real (kind=rk8), dimension(:), intent(out), allocatable T, real (kind=rk8), dimension(:), intent(out), allocatable BAR_PRES, real (kind=rk8), dimension(:), intent(out), allocatable ADPS, real (kind=rk8), dimension(:), intent(out), allocatable PRECIP, real (kind=rk8), dimension(:), intent(out), allocatable LPRECIP, real (kind=rk8), dimension(:), intent(out), allocatable EVAPOR, real (kind=rk8), dimension(:), intent(out), allocatable SHF, real (kind=rk8), dimension(:), intent(out), allocatable RL, real (kind=rk8), dimension(:), intent(out), allocatable RADIATIONT, real (kind=rk8), dimension(:), intent(out), allocatable RADIATIONB, real (kind=rk8), dimension(:), intent(out), allocatable RADIATION, real (kind=rk8), dimension(:), intent(out), allocatable TAOX, real (kind=rk8), dimension(:), intent(out), allocatable TAOY)"

.PP
Definition at line 1462 of file io\&.f90\&.
.PP
.nf
1462     USE portable
1463     USE netcdf
1464 
1465     IMPLICIT NONE
1466 
1467     CHARACTER (LEN=*), INTENT(IN)                                       :: inputfile    ! Name of the input file\&.
1468     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: t            ! Time\&.
1469     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: bar_pres     ! Barometric pressure (hPa)\&.
1470     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: adps         ! V\&.grad(PS)
1471     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: precip
1472     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: lprecip
1473     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: evapor
1474     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: shf
1475     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: rl
1476     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: radiationt
1477     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: radiationb
1478     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: radiation
1479     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: taox
1480     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: taoy
1481 
1482     !
1483     ! Local variables\&.
1484     !
1485     INTEGER (KIND=IK4)          :: ncid                                                 ! ID of NetCDF file\&.
1486     INTEGER (KIND=IK4)          :: t_dim_id                                             ! Time dimension ID\&.
1487     INTEGER (KIND=IK4)          :: t_dim_len                                            ! Length of the time dimension\&.
1488     INTEGER (KIND=IK4)          :: t_var_id                                             ! Time coordinate variable\&.
1489     INTEGER (KIND=IK4)          :: bar_pres_var_id
1490     INTEGER (KIND=IK4)          :: adps_var_id
1491     INTEGER (KIND=IK4)          :: precip_var_id
1492     INTEGER (KIND=IK4)          :: lprecip_var_id
1493     INTEGER (KIND=IK4)          :: evapor_var_id
1494     INTEGER (KIND=IK4)          :: shf_var_id
1495     INTEGER (KIND=IK4)          :: rl_var_id
1496     INTEGER (KIND=IK4)          :: radiationt_var_id
1497     INTEGER (KIND=IK4)          :: radiationb_var_id
1498     INTEGER (KIND=IK4)          :: radiation_var_id
1499     INTEGER (KIND=IK4)          :: taox_var_id
1500     INTEGER (KIND=IK4)          :: taoy_var_id
1501     INTEGER (KIND=IK4)          :: memst                                                ! Status of memory allocations\&.
1502     INTEGER (KIND=IK4)          :: iost                                                 ! I/O status\&.
1503     LOGICAL                     :: ncerror                                              ! Did a NetCDF function fail?
1504 
1505     iost    = nf90_noerr
1506     ncerror = \&.false\&.
1507     !
1508     ! Open the NetCDF file\&.
1509     !
1510     iost    = nf90_open(inputfile, nf90_nowrite, ncid)
1511     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1512 
1513     !
1514     ! Get the time dimension ID, and the length of the dimension\&.
1515     !
1516     iost    = nf90_inq_dimid(ncid, "time", t_dim_id)                            ! Time steps\&.
1517     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1518     iost    = nf90_inquire_dimension(ncid, t_dim_id, len=t_dim_len)             ! Get the time dimension length\&.
1519     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1520 
1521     !
1522     ! Allocate enough memory to hold all the data\&. Be paranoid \&.\&.\&. check that arrays have not already been allocated\&.
1523     !
1524     IF (ALLOCATED(t))           DEALLOCATE(t)
1525     IF (ALLOCATED(bar_pres))    DEALLOCATE(bar_pres)
1526     IF (ALLOCATED(adps))        DEALLOCATE(adps)
1527     IF (ALLOCATED(precip))      DEALLOCATE(precip)
1528     IF (ALLOCATED(lprecip))     DEALLOCATE(lprecip)
1529     IF (ALLOCATED(evapor))      DEALLOCATE(evapor)
1530     IF (ALLOCATED(shf))         DEALLOCATE(shf)
1531     IF (ALLOCATED(rl))          DEALLOCATE(rl)
1532     IF (ALLOCATED(radiationt))  DEALLOCATE(radiationt)
1533     IF (ALLOCATED(radiationb))  DEALLOCATE(radiationb)
1534     IF (ALLOCATED(radiation))   DEALLOCATE(radiation)
1535     IF (ALLOCATED(taox))        DEALLOCATE(taox)
1536     IF (ALLOCATED(taoy))        DEALLOCATE(taoy)
1537     ALLOCATE(t(t_dim_len), bar_pres(t_dim_len), adps(t_dim_len), precip(t_dim_len), lprecip(t_dim_len), evapor(t_dim_len), &
1538         & shf(t_dim_len), rl(t_dim_len), radiationt(t_dim_len), radiationb(t_dim_len), radiation(t_dim_len), taox(t_dim_len), &
1539         & taoy(t_dim_len), stat=memst)
1540     IF (memst \&.NE\&. 0) THEN
1541         print *,'E: Unable to allocate memory to hold 2D data'
1542         stop '1'
1543     END IF
1544 
1545     !
1546     ! Get the variable IDs\&.
1547     !
1548     ncerror = \&.false\&.
1549     ncerror = (nf90_inq_varid(ncid, "time", t_var_id)                   \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1550     ncerror = (nf90_inq_varid(ncid, "bar_pres", bar_pres_var_id)        \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1551     ncerror = (nf90_inq_varid(ncid, "adps", adps_var_id)                \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1552     ncerror = (nf90_inq_varid(ncid, "precip", precip_var_id)            \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1553     ncerror = (nf90_inq_varid(ncid, "lprecip", lprecip_var_id)          \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1554     ncerror = (nf90_inq_varid(ncid, "evapor", evapor_var_id)            \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1555     ncerror = (nf90_inq_varid(ncid, "shf", shf_var_id)                  \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1556     ncerror = (nf90_inq_varid(ncid, "rl", rl_var_id)                    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1557     ncerror = (nf90_inq_varid(ncid, "radiationt", radiationt_var_id)    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1558     ncerror = (nf90_inq_varid(ncid, "radiationb", radiationb_var_id)    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1559     ncerror = (nf90_inq_varid(ncid, "radiation", radiation_var_id)      \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1560     ncerror = (nf90_inq_varid(ncid, "taox", taox_var_id)                \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1561     ncerror = (nf90_inq_varid(ncid, "taoy", taoy_var_id)                \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1562     IF (ncerror) GO TO 9999
1563 
1564     !
1565     ! Read the data\&.
1566     !
1567     ncerror = \&.false\&.
1568     ncerror = (nf90_get_var(ncid, t_var_id, t)                          \&.NE\&. nf90_noerr)
1569     ncerror = (nf90_get_var(ncid, bar_pres_var_id, bar_pres)            \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1570     ncerror = (nf90_get_var(ncid, adps_var_id, adps)                    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1571     ncerror = (nf90_get_var(ncid, precip_var_id, precip)                \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1572     ncerror = (nf90_get_var(ncid, lprecip_var_id, lprecip)              \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1573     ncerror = (nf90_get_var(ncid, evapor_var_id, evapor)                \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1574     ncerror = (nf90_get_var(ncid, shf_var_id, shf)                      \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1575     ncerror = (nf90_get_var(ncid, rl_var_id, rl)                        \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1576     ncerror = (nf90_get_var(ncid, radiationt_var_id, radiationt)        \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1577     ncerror = (nf90_get_var(ncid, radiationb_var_id, radiationb)        \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1578     ncerror = (nf90_get_var(ncid, radiation_var_id, radiation)          \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1579     ncerror = (nf90_get_var(ncid, taox_var_id, taox)                    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1580     ncerror = (nf90_get_var(ncid, taoy_var_id, taoy)                    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1581     IF (ncerror) GO TO 9999
1582 
1583     !
1584     ! Close the NetCDF file\&.
1585     !
1586     iost    = nf90_close(ncid)
1587     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1588 
1589     !
1590     ! Catch any NetCDF errors here\&.
1591     !
1592     9999 CONTINUE
1593     IF (ncerror) THEN
1594         print *,'E: NetCDF error encountered'
1595         IF (iost \&.NE\&. nf90_noerr) THEN
1596             print *, trim(nf90_strerror(iost))
1597         END IF
1598         stop '1'
1599     END IF
1600 
.fi
.SS "subroutine io::ipt_2draw_netcdf (character (len=*), intent(in) INPUTFILE, character (len=*), intent(in) VAR_NAME, real (kind=rk8), dimension(:), intent(out), allocatable VAR)"

.PP
Definition at line 1614 of file io\&.f90\&.
.PP
.nf
1614     USE portable
1615     USE netcdf
1616 
1617     IMPLICIT NONE
1618 
1619     CHARACTER (LEN=*), INTENT(IN)                                       :: inputfile    ! Name of the input file\&.
1620     CHARACTER (LEN=*), INTENT(IN)                                       :: var_name     ! Name of the variable to read\&.
1621     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE             :: var          ! Holds the data we are reading\&.
1622 
1623 
1624     !
1625     ! Local variables\&.
1626     !
1627     INTEGER (KIND=IK4)          :: ncid                                                 ! ID of NetCDF file\&.
1628     INTEGER (KIND=IK4)          :: t_dim_id                                             ! Time dimension ID\&.
1629     INTEGER (KIND=IK4)          :: t_dim_len                                            ! Length of the time dimension\&.
1630     INTEGER (KIND=IK4)          :: var_id                                               ! Variable ID\&.
1631     INTEGER (KIND=IK4)          :: memst                                                ! Status of memory allocations\&.
1632     INTEGER (KIND=IK4)          :: iost                                                 ! I/O status\&.
1633 
1634     !
1635     ! Open the NetCDF file\&.
1636     !
1637     iost    = nf90_open(inputfile, nf90_nowrite, ncid)
1638     IF (iost \&.NE\&. nf90_noerr) THEN
1639         print *,'E: ',nf90_strerror(iost)
1640         GO TO 9999
1641     END IF
1642 
1643     !
1644     ! Get the time dimension ID, and the length of the dimension\&.
1645     !
1646     iost    = nf90_inq_dimid(ncid, "time", t_dim_id)                            ! Time steps\&.
1647     IF (iost \&.NE\&. nf90_noerr) THEN
1648         print *,'E: ',nf90_strerror(iost)
1649         GO TO 9999
1650     END IF
1651     iost    = nf90_inquire_dimension(ncid, t_dim_id, len=t_dim_len)             ! Get the time dimension length\&.
1652     IF (iost \&.NE\&. nf90_noerr) THEN
1653         print *,'E: ',nf90_strerror(iost)
1654         GO TO 9999
1655     END IF
1656 
1657     !
1658     ! Allocate enough memory to hold all the data\&. Be paranoid \&.\&.\&. check that arrays have not already been allocated\&.
1659     !
1660     IF (ALLOCATED(var))           DEALLOCATE(var)
1661     ALLOCATE(var(t_dim_len), stat=memst)
1662     IF (memst \&.NE\&. 0) THEN
1663         print *,'E: Unable to allocate memory to hold data'
1664         GO TO 9999
1665     END IF
1666 
1667     !
1668     ! Get the variable IDs\&.
1669     !
1670     iost = nf90_inq_varid(ncid, var_name, var_id)
1671     IF (iost \&.NE\&. nf90_noerr) THEN
1672         print *,'E: ',nf90_strerror(iost)
1673         GO TO 9999
1674     END IF
1675 
1676     !
1677     ! Read the data\&.
1678     !
1679     iost = nf90_get_var(ncid, var_id, var)
1680     IF (iost \&.NE\&. nf90_noerr) THEN
1681         print *,'E: ',nf90_strerror(iost)
1682         GO TO 9999
1683     END IF
1684 
1685     !
1686     ! Close the NetCDF file\&.
1687     !
1688     iost    = nf90_close(ncid)
1689     IF (iost \&.NE\&. nf90_noerr) THEN
1690         print *,'E: ',nf90_strerror(iost)
1691         GO TO 9999
1692     END IF
1693 
1694     9999 CONTINUE       ! Errors will be sent here\&.
1695 
.fi
.SS "subroutine io::ipt_3d_netcdf (character (len=*), intent(in) INPUTFILE, real (kind=rk8), dimension(:,:,:,:), intent(out), optional, allocatable DU, character (len=64), dimension(:), intent(out), optional, allocatable VU, real (kind=rk8), dimension(:,:,:), intent(out), optional, allocatable DS, real (kind=rk8), dimension(:), intent(out), optional, allocatable T, character (len=64), dimension(:), intent(out), optional, allocatable STN, real (kind=rk8), dimension(:), intent(out), optional, allocatable WEIGHT, real (kind=rk8), dimension(:), intent(out), optional, allocatable LEV, integer (kind=ik4), dimension(:,:), intent(out), optional, allocatable BOUNDARY, integer (kind=ik4), dimension(:), intent(out), optional, allocatable STRU, integer (kind=ik4), dimension(:), intent(out), optional, allocatable STRS)"

.PP
Definition at line 618 of file io\&.f90\&.
.PP
.nf
618     USE portable
619     USE netcdf
620 
621     IMPLICIT NONE
622 
623     CHARACTER (LEN=*), INTENT(IN)                                           :: inputfile    ! Name of the input file\&.
624     REAL (KIND=RK8), DIMENSION(:,:,:,:), INTENT(OUT), ALLOCATABLE, OPTIONAL :: du           ! The 3D data\&.
625     CHARACTER (LEN=64), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL    :: vu           ! Names of the variables in DU\&.
626     REAL (KIND=RK8), DIMENSION(:,:,:), INTENT(OUT), ALLOCATABLE, OPTIONAL   :: ds           ! Surface level data\&.
627     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL       :: t            ! Time steps\&.          
628     CHARACTER (LEN=64), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL    :: stn          ! Names of the stations\&.
629     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL       :: lev          ! Vertical levels in analysis\&.
630     INTEGER (KIND=IK4), DIMENSION(:,:), INTENT(OUT), ALLOCATABLE, OPTIONAL  :: boundary     ! Boundary array\&.
631     INTEGER (KIND=IK4), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL    :: stru         ! STRU array\&.
632     INTEGER (KIND=IK4), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL    :: strs         ! STRS array\&.
633     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL       :: weight       ! WEIGHT array\&.
634 
635     !
636     ! Local variables\&.
637     !
638     INTEGER (KIND=IK4)          :: ncid                                                 ! ID of NetCDF file\&.
639 
640     INTEGER (KIND=IK4)          :: t_dim_id                                             ! Time dimension ID\&.
641     INTEGER (KIND=IK4)          :: t_dim_len                                            ! Number of time steps\&.
642     INTEGER (KIND=IK4)          :: stn_dim_id                                           ! Station dimension ID\&.
643     INTEGER (KIND=IK4)          :: stn_dim_len                                          ! Number of stations\&.
644     INTEGER (KIND=IK4)          :: lev_dim_id                                           ! Vertical level dimension ID\&.
645     INTEGER (KIND=IK4)          :: lev_dim_len                                          ! Number of vertical levels\&.
646     INTEGER (KIND=IK4)          :: var_dim_id                                           ! Variable dimension ID\&.
647     INTEGER (KIND=IK4)          :: var_dim_len                                          ! Number of variables\&.
648     INTEGER (KIND=IK4)          :: str_dim_id                                           ! String dimension ID\&.
649     INTEGER (KIND=IK4)          :: str_dim_len                                          ! String length\&.
650     INTEGER (KIND=IK4)          :: bnd_dim_id                                           ! Dimension used for BOUNDARY array\&.
651     INTEGER (KIND=IK4)          :: bnd_dim_len                                          ! Length of BND dimension\&.
652     INTEGER (KIND=IK4)          :: stru_dim_id                                          ! Dimension used for STRU array\&.
653     INTEGER (KIND=IK4)          :: stru_dim_len                                         ! Length of STRU dimension\&.
654     INTEGER (KIND=IK4)          :: strs_dim_id                                          ! Dimension used for STRS array\&.
655     INTEGER (KIND=IK4)          :: strs_dim_len                                         ! Length of STRS dimension\&.
656     INTEGER (KIND=IK4)          :: weight_dim_id                                        ! Dimension used for WEIGHT array\&.
657     INTEGER (KIND=IK4)          :: weight_dim_len                                       ! Length of WEIGHT dimension\&.
658 
659     INTEGER (KIND=IK4)          :: t_var_id                                             ! Time variable ID\&.
660     INTEGER (KIND=IK4)          :: du_var_id                                            ! 3D data variable ID\&.
661     INTEGER (KIND=IK4)          :: ds_var_id                                            ! Surface data variable ID\&.
662     INTEGER (KIND=IK4)          :: stn_var_id                                           ! Station names variable ID\&.
663     INTEGER (KIND=IK4)          :: lev_var_id                                           ! Vertical levels variable ID\&.
664     INTEGER (KIND=IK4)          :: vu_var_id                                            ! Variable names variable ID\&.
665     INTEGER (KIND=IK4)          :: boundary_var_id                                      ! ID of BOUNDARY variable\&.
666     INTEGER (KIND=IK4)          :: stru_var_id                                          ! ID of STRU variable\&.
667     INTEGER (KIND=IK4)          :: strs_var_id                                          ! ID of STRS variable\&.
668     INTEGER (KIND=IK4)          :: weight_var_id                                        ! ID of WEIGHT variable\&.
669 
670     INTEGER (KIND=IK4)          :: memst                                                ! Status of memory allocations\&.
671     INTEGER (KIND=IK4)          :: iost                                                 ! I/O status\&.
672     LOGICAL                     :: ncerror
673 
674     iost    = nf90_noerr
675     ncerror = \&.false\&.
676     !
677     ! Open the NetCDF file\&.
678     !
679     iost    = nf90_open(inputfile, nf90_nowrite, ncid)
680     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
681 
682     !
683     ! Get the dimension IDs, and the length of the dimensions\&.
684     !
685     iost    = nf90_inq_dimid(ncid, "time", t_dim_id)                            ! Time steps\&.
686     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
687     iost    = nf90_inquire_dimension(ncid, t_dim_id, len=t_dim_len)             ! Get the number of time steps\&.
688     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
689 
690     iost    = nf90_inq_dimid(ncid, "stations", stn_dim_id)                      ! Time steps\&.
691     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
692     iost    = nf90_inquire_dimension(ncid, stn_dim_id, len=stn_dim_len)         ! Get the number of stations\&.
693     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
694 
695     iost    = nf90_inq_dimid(ncid, "levels", lev_dim_id)                        ! Vertical levels\&.
696     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
697     iost    = nf90_inquire_dimension(ncid, lev_dim_id, len=lev_dim_len)         ! Number of vertical levels\&.
698     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
699 
700     iost    = nf90_inq_dimid(ncid, "variables", var_dim_id)                     ! Variables\&.
701     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
702     iost    = nf90_inquire_dimension(ncid, var_dim_id, len=var_dim_len)         ! Get the number of variables\&.
703     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
704 
705     iost    = nf90_inq_dimid(ncid, "string", str_dim_id)                        ! String dimension\&.
706     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
707     iost    = nf90_inquire_dimension(ncid, str_dim_id, len=str_dim_len)         ! String length\&.
708     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
709 
710     iost    = nf90_inq_dimid(ncid, "bnd", bnd_dim_id)                           ! bnd dimension\&.
711     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
712     iost    = nf90_inquire_dimension(ncid, bnd_dim_id, len=bnd_dim_len)         ! bnd dimension length (should be 3)\&.
713     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
714 
715     iost    = nf90_inq_dimid(ncid, "stru", stru_dim_id)                         ! stru dimension\&.
716     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
717     iost    = nf90_inquire_dimension(ncid, stru_dim_id, len=stru_dim_len)       ! stru dimension length\&.
718     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
719 
720     iost    = nf90_inq_dimid(ncid, "strs", strs_dim_id)                         ! strs dimension\&.
721     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
722     iost    = nf90_inquire_dimension(ncid, strs_dim_id, len=strs_dim_len)       ! strs dimension length\&.
723     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
724 
725     iost    = nf90_inq_dimid(ncid, "weight", weight_dim_id)                     ! weight dimension\&.
726     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
727     iost    = nf90_inquire_dimension(ncid, weight_dim_id, len=weight_dim_len)   ! weight dimension length\&.
728     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
729 
730     !
731     ! Read in the data\&. Only read those variables which the user requests in the optional subroutine arguments\&.
732     ! When allocating memory, be paranoid, check it hasn't already been allocated\&.
733     !
734     IF (PRESENT(du)) THEN
735         IF (ALLOCATED(du))          DEALLOCATE(du)
736         ALLOCATE(du(var_dim_len,lev_dim_len,stn_dim_len,t_dim_len), stat=memst)
737         IF (memst \&.NE\&. 0) THEN
738             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold DU'
739             stop '1'
740         END IF
741         iost = nf90_inq_varid(ncid, "du", du_var_id)
742         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
743         iost = nf90_get_var(ncid, du_var_id, du)
744         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
745     END IF
746     IF (PRESENT(vu)) THEN
747         IF (ALLOCATED(vu))          DEALLOCATE(vu)
748         ALLOCATE(vu(var_dim_len), stat=memst)
749         IF (memst \&.NE\&. 0) THEN
750             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold VU'
751             stop '1'
752         END IF
753         iost = nf90_inq_varid(ncid, "variables", vu_var_id)
754         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
755         iost = nf90_get_var(ncid, vu_var_id, vu)
756         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
757     END IF
758 
759     IF (PRESENT(ds)) THEN
760         IF (ALLOCATED(ds))          DEALLOCATE(ds)
761         ALLOCATE(ds(var_dim_len,stn_dim_len,t_dim_len), stat=memst)
762         IF (memst \&.NE\&. 0) THEN
763             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold DS'
764             stop '1'
765         END IF
766         iost = nf90_inq_varid(ncid, "ds", ds_var_id)
767         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
768         iost = nf90_get_var(ncid, ds_var_id, ds)
769         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
770     END IF
771 
772     IF (PRESENT(t)) THEN
773         IF (ALLOCATED(t))           DEALLOCATE(t)
774         ALLOCATE(t(t_dim_len), stat=memst)
775         IF (memst \&.NE\&. 0) THEN
776             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold T'
777             stop '1'
778         END IF
779         iost = nf90_inq_varid(ncid, "time", t_var_id)
780         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
781         iost = nf90_get_var(ncid, t_var_id, t)
782         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
783     END IF
784 
785     IF (PRESENT(stn)) THEN
786         IF (ALLOCATED(stn))         DEALLOCATE(stn)
787         ALLOCATE(stn(stn_dim_len), stat=memst)
788         IF (memst \&.NE\&. 0) THEN
789             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold STN'
790             stop '1'
791         END IF
792         iost = nf90_inq_varid(ncid, "stations", stn_var_id)
793         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
794         iost = nf90_get_var(ncid, stn_var_id, stn)
795         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
796     END IF
797 
798     IF (PRESENT(lev)) THEN
799         IF (ALLOCATED(lev))         DEALLOCATE(lev)
800         ALLOCATE(lev(lev_dim_len), stat=memst)
801         IF (memst \&.NE\&. 0) THEN
802             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold LEV'
803             stop '1'
804         END IF
805         iost = nf90_inq_varid(ncid, "levels", lev_var_id)
806         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
807         iost = nf90_get_var(ncid, lev_var_id, lev)
808         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
809     END IF
810 
811     IF (PRESENT(boundary)) THEN
812         IF (ALLOCATED(boundary))    DEALLOCATE(boundary)
813         ALLOCATE(boundary(bnd_dim_len,t_dim_len), stat=memst)
814         IF (memst \&.NE\&. 0) THEN
815             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold BOUNDARY'
816             stop '1'
817         END IF
818         iost = nf90_inq_varid(ncid, "boundary", boundary_var_id)
819         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
820         iost = nf90_get_var(ncid, boundary_var_id, boundary)
821         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
822     END IF
823 
824     IF (PRESENT(stru)) THEN
825         IF (ALLOCATED(stru))        DEALLOCATE(stru)
826         ALLOCATE(stru(stru_dim_len), stat=memst)
827         IF (memst \&.NE\&. 0) THEN
828             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold STRU'
829             stop '1'
830         END IF
831         iost = nf90_inq_varid(ncid, "stru", stru_var_id)
832         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
833         iost = nf90_get_var(ncid, stru_var_id, stru)
834         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
835     END IF
836 
837     IF (PRESENT(strs)) THEN
838         IF (ALLOCATED(strs))        DEALLOCATE(strs)
839         ALLOCATE(strs(strs_dim_len), stat=memst)
840         IF (memst \&.NE\&. 0) THEN
841             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold STRS'
842             stop '1'
843         END IF
844         iost = nf90_inq_varid(ncid, "strs", strs_var_id)
845         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
846         iost = nf90_get_var(ncid, strs_var_id, strs)
847         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
848     END IF
849 
850     IF (PRESENT(weight)) THEN
851         IF (ALLOCATED(weight))        DEALLOCATE(weight)
852         ALLOCATE(weight(weight_dim_len), stat=memst)
853         IF (memst \&.NE\&. 0) THEN
854             print *,'E: IPT_3D_NETCDF: Unable to allocate memory to hold WEIGHT'
855             stop '1'
856         END IF
857         iost = nf90_inq_varid(ncid, "weight", weight_var_id)
858         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
859         iost = nf90_get_var(ncid, weight_var_id, weight)
860         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
861     END IF
862 
863     !
864     ! Close the NetCDF file\&.
865     !
866     iost    = nf90_close(ncid)
867     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
868 
869     !
870     ! Catch any NetCDF errors here\&.
871     !
872     9999 CONTINUE
873     IF (ncerror) THEN
874         print *,'E: IPT_3D_NETCDF: NetCDF error encountered'
875         IF (iost \&.NE\&. nf90_noerr) THEN
876             print *, trim(nf90_strerror(iost))
877         END IF
878         stop '1'
879     END IF
880 
.fi
.SS "subroutine io::ipt_budget_netcdf (character (len=*), intent(in) INPUTFILE, real (kind=rk8), dimension(:,:,:), intent(out), optional, allocatable BUDGET_COLUMN, real (kind=rk8), dimension(:,:,:,:), intent(out), optional, allocatable BUDGET_LAYER, character (len=64), dimension(:,:), intent(out), optional, allocatable VBUDGET_COLUMN, character (len=64), dimension(:,:), intent(out), optional, allocatable VBUDGET_LAYER, real (kind=rk8), dimension(:), intent(out), optional, allocatable AVE_QS, real (kind=rk8), dimension(:), intent(out), optional, allocatable AVE_SS, real (kind=rk8), dimension(:), intent(out), optional, allocatable P, real (kind=rk8), dimension(:), intent(out), optional, allocatable T)"

.PP
Definition at line 1070 of file io\&.f90\&.
.PP
.nf
1070     USE portable
1071     USE netcdf
1072 
1073     IMPLICIT NONE
1074 
1075     CHARACTER (LEN=*), INTENT(IN)                                           :: inputfile    ! Name of the input file\&.
1076     REAL (KIND=RK8), DIMENSION(:,:,:), INTENT(OUT), ALLOCATABLE, OPTIONAL   :: budget_column
1077     REAL (KIND=RK8), DIMENSION(:,:,:,:), INTENT(OUT), ALLOCATABLE, OPTIONAL :: budget_layer
1078     CHARACTER (LEN=64), DIMENSION(:,:), INTENT(OUT), ALLOCATABLE, OPTIONAL  :: vbudget_column
1079     CHARACTER (LEN=64), DIMENSION(:,:), INTENT(OUT), ALLOCATABLE, OPTIONAL  :: vbudget_layer
1080     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL       :: ave_qs
1081     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL       :: ave_ss
1082     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL       :: p
1083     REAL (KIND=RK8), DIMENSION(:), INTENT(OUT), ALLOCATABLE, OPTIONAL       :: t
1084 
1085     !
1086     ! Local variables\&.
1087     !
1088     INTEGER (KIND=IK4)          :: ncid                                                 ! ID of NetCDF file\&.
1089 
1090     INTEGER (KIND=IK4)          :: bcv_dim_id, bct_dim_id, blv_dim_id, blt_dim_id, p_dim_id, t_dim_id, str_dim_id
1091     INTEGER (KIND=IK4)          :: bcv_dim_len, bct_dim_len, blv_dim_len, blt_dim_len, p_dim_len, t_dim_len, str_dim_len
1092     INTEGER (KIND=IK4)          :: bc_var_id, bl_var_id, vbc_var_id, vbl_var_id, ave_qs_var_id, ave_ss_var_id, p_var_id, t_var_id
1093     INTEGER (KIND=IK4)          :: memst                                                ! Status of memory allocations\&.
1094     INTEGER (KIND=IK4)          :: iost                                                 ! I/O status\&.
1095     LOGICAL                     :: ncerror
1096 
1097     iost    = nf90_noerr
1098     ncerror = \&.false\&.
1099     !
1100     ! Open the NetCDF file\&.
1101     !
1102     iost    = nf90_open(inputfile, nf90_nowrite, ncid)
1103     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1104 
1105     !
1106     ! Get the dimension IDs, and the length of the dimensions\&.
1107     !
1108     iost    = nf90_inq_dimid(ncid, "time", t_dim_id)                            ! Time steps\&.
1109     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1110     iost    = nf90_inquire_dimension(ncid, t_dim_id, len=t_dim_len)             ! Get the number of time steps\&.
1111     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1112 
1113     iost    = nf90_inq_dimid(ncid, "levels", p_dim_id)                          ! Pressure levels\&.
1114     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1115     iost    = nf90_inquire_dimension(ncid, p_dim_id, len=p_dim_len)             ! Get number of levels\&.
1116     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1117 
1118     iost    = nf90_inq_dimid(ncid, "string", str_dim_id)                        ! String dimension\&.
1119     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1120     iost    = nf90_inquire_dimension(ncid, str_dim_id, len=str_dim_len)         ! String length\&.
1121     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1122     IF (str_dim_len \&.NE\&. 64) THEN
1123         print *,'E: STRING dimension length is not 64'
1124         GO TO 9999
1125     END IF
1126 
1127     iost    = nf90_inq_dimid(ncid, "bcv", bcv_dim_id)
1128     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1129     iost    = nf90_inquire_dimension(ncid, bcv_dim_id, len=bcv_dim_len)
1130     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1131 
1132     iost    = nf90_inq_dimid(ncid, "bct", bct_dim_id)
1133     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1134     iost    = nf90_inquire_dimension(ncid, bct_dim_id, len=bct_dim_len)
1135     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1136 
1137     iost    = nf90_inq_dimid(ncid, "blv", blv_dim_id)
1138     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1139     iost    = nf90_inquire_dimension(ncid, blv_dim_id, len=blv_dim_len)
1140     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1141 
1142     iost    = nf90_inq_dimid(ncid, "blt", blt_dim_id)
1143     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1144     iost    = nf90_inquire_dimension(ncid, blt_dim_id, len=blt_dim_len)
1145     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1146 
1147     !
1148     ! Read in the data\&. Only read those variables which the user requests in the optional subroutine arguments\&.
1149     ! When allocating memory, be paranoid, check it hasn't already been allocated\&.
1150     !
1151     IF (PRESENT(budget_column)) THEN
1152         IF (ALLOCATED(budget_column))          DEALLOCATE(budget_column)
1153         ALLOCATE(budget_column(bcv_dim_len,bct_dim_len,t_dim_len), stat=memst)
1154         IF (memst \&.NE\&. 0) THEN
1155             print *,'E: IPT_BUDGET_NETCDF: Unable to allocate memory to hold BUDGET_COLUMN'
1156             stop '1'
1157         END IF
1158         iost = nf90_inq_varid(ncid, "budget_column", bc_var_id)
1159         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1160         iost = nf90_get_var(ncid, bc_var_id, budget_column)
1161         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1162     END IF
1163 
1164     IF (PRESENT(budget_layer)) THEN
1165         IF (ALLOCATED(budget_layer))          DEALLOCATE(budget_layer)
1166         ALLOCATE(budget_layer(blv_dim_len,blt_dim_len,p_dim_len,t_dim_len), stat=memst)
1167         IF (memst \&.NE\&. 0) THEN
1168             print *,'E: IPT_BUDGET_NETCDF: Unable to allocate memory to hold BUDGET_LAYER'
1169             stop '1'
1170         END IF
1171         iost = nf90_inq_varid(ncid, "budget_layer", bl_var_id)
1172         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1173         iost = nf90_get_var(ncid, bl_var_id, budget_layer)
1174         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1175     END IF
1176 
1177     IF (PRESENT(vbudget_column)) THEN
1178         IF (ALLOCATED(vbudget_column))          DEALLOCATE(vbudget_column)
1179         ALLOCATE(vbudget_column(bcv_dim_len,bct_dim_len), stat=memst)
1180         IF (memst \&.NE\&. 0) THEN
1181             print *,'E: IPT_BUDGET_NETCDF: Unable to allocate memory to hold VBUDGET_COLUMN'
1182             stop '1'
1183         END IF
1184         iost = nf90_inq_varid(ncid, "vbudget_column", vbc_var_id)
1185         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1186         iost = nf90_get_var(ncid, vbc_var_id, vbudget_column)
1187         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1188     END IF
1189 
1190     IF (PRESENT(vbudget_layer)) THEN
1191         IF (ALLOCATED(vbudget_layer))          DEALLOCATE(vbudget_layer)
1192         ALLOCATE(vbudget_layer(blv_dim_len,blt_dim_len), stat=memst)
1193         IF (memst \&.NE\&. 0) THEN
1194             print *,'E: IPT_BUDGET_NETCDF: Unable to allocate memory to hold VBUDGET_LAYER'
1195             stop '1'
1196         END IF
1197         iost = nf90_inq_varid(ncid, "vbudget_layer", vbl_var_id)
1198         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1199         iost = nf90_get_var(ncid, vbl_var_id, vbudget_layer)
1200         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1201     END IF
1202 
1203     IF (PRESENT(ave_qs)) THEN
1204         IF (ALLOCATED(ave_qs))           DEALLOCATE(ave_qs)
1205         ALLOCATE(ave_qs(t_dim_len), stat=memst)
1206         IF (memst \&.NE\&. 0) THEN
1207             print *,'E: IPT_BUDGET_NETCDF: Unable to allocate memory to hold AVE_QS'
1208             stop '1'
1209         END IF
1210         iost = nf90_inq_varid(ncid, "ave_qs", ave_qs_var_id)
1211         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1212         iost = nf90_get_var(ncid, ave_qs_var_id, ave_qs)
1213         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1214     END IF
1215 
1216     IF (PRESENT(ave_ss)) THEN
1217         IF (ALLOCATED(ave_ss))           DEALLOCATE(ave_ss)
1218         ALLOCATE(ave_ss(t_dim_len), stat=memst)
1219         IF (memst \&.NE\&. 0) THEN
1220             print *,'E: IPT_BUDGET_NETCDF: Unable to allocate memory to hold AVE_SS'
1221             stop '1'
1222         END IF
1223         iost = nf90_inq_varid(ncid, "ave_ss", ave_ss_var_id)
1224         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1225         iost = nf90_get_var(ncid, ave_ss_var_id, ave_ss)
1226         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1227     END IF
1228 
1229     IF (PRESENT(p)) THEN
1230         IF (ALLOCATED(p))         DEALLOCATE(p)
1231         ALLOCATE(p(p_dim_len), stat=memst)
1232         IF (memst \&.NE\&. 0) THEN
1233             print *,'E: IPT_BUDGET_NETCDF: Unable to allocate memory to hold P'
1234             stop '1'
1235         END IF
1236         iost = nf90_inq_varid(ncid, "levels", p_var_id)
1237         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1238         iost = nf90_get_var(ncid, p_var_id, p)
1239         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1240     END IF
1241 
1242     IF (PRESENT(t)) THEN
1243         IF (ALLOCATED(t))           DEALLOCATE(t)
1244         ALLOCATE(t(t_dim_len), stat=memst)
1245         IF (memst \&.NE\&. 0) THEN
1246             print *,'E: IPT_BUDGET_NETCDF: Unable to allocate memory to hold T'
1247             stop '1'
1248         END IF
1249         iost = nf90_inq_varid(ncid, "time", t_var_id)
1250         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1251         iost = nf90_get_var(ncid, t_var_id, t)
1252         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1253     END IF
1254 
1255     !
1256     ! Close the NetCDF file\&.
1257     !
1258     iost    = nf90_close(ncid)
1259     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1260 
1261     !
1262     ! Catch any NetCDF errors here\&.
1263     !
1264     9999 CONTINUE
1265     IF (ncerror) THEN
1266         print *,'E: IPT_BUDGET_NETCDF: NetCDF error encountered'
1267         IF (iost \&.NE\&. nf90_noerr) THEN
1268             print *, trim(nf90_strerror(iost))
1269         END IF
1270         stop '1'
1271     END IF
1272 
.fi
.SS "subroutine io::ipt_ht (character (len=*), intent(in) INPUTFILE, character (len=64), intent(out) INSTRUMENT, integer (kind=ik4), intent(out) NV, integer (kind=ik4), intent(out) NST, integer (kind=ik4), intent(out) NT, character (len=64), dimension(:), intent(out), allocatable V, character (len=64), dimension(:), intent(out), allocatable ST, real (kind=rk8), dimension(:), intent(out), allocatable LON, real (kind=rk8), dimension(:), intent(out), allocatable LAT, real (kind=rk8), dimension(:), intent(out), allocatable T, real (kind=rk8), dimension(:,:,:), intent(out), allocatable D)"

.PP
Definition at line 163 of file io\&.f90\&.
.PP
.nf
163     USE portable
164 
165     IMPLICIT NONE
166 
167     CHARACTER (LEN=*), INTENT(IN)                                       :: inputfile    ! Input data filename\&.
168     CHARACTER (LEN=64), INTENT(OUT)                                     :: instrument   ! Name of instrument which created the data\&.
169     INTEGER (KIND=IK4), INTENT(OUT)                                     :: nv           ! Number of variables?
170     INTEGER (KIND=IK4), INTENT(OUT)                                     :: nst          ! Number of stations\&.
171     INTEGER (KIND=IK4), INTENT(OUT)                                     :: nt           ! Number of time steps\&.
172     CHARACTER (LEN=64), DIMENSION(:), ALLOCATABLE, INTENT(OUT)          :: v            ! Names of the variables\&.
173     CHARACTER (LEN=64), DIMENSION(:), ALLOCATABLE, INTENT(OUT)          :: st           ! Names of the stations\&.
174     REAL (KIND=RK8), DIMENSION(:), ALLOCATABLE, INTENT(OUT)             :: lon          ! Longitudes of the stations\&.
175     REAL (KIND=RK8), DIMENSION(:), ALLOCATABLE, INTENT(OUT)             :: lat          ! Latitudes of the stations\&.
176     REAL (KIND=RK8), DIMENSION(:), ALLOCATABLE, INTENT(OUT)             :: t            ! Time steps\&.
177     REAL (KIND=RK8), DIMENSION(:,:,:), ALLOCATABLE, INTENT(OUT)         :: d            ! The data\&.
178 
179     !
180     ! Local variables\&.
181     !
182     INTEGER (KIND=IK4)                                                  :: iost         ! Status of IO operations\&.
183     INTEGER (KIND=IK4)                                                  :: memst        ! Status of memory allocation operations\&.
184     INTEGER (KIND=IK4)                                                  :: ii, jj, kk   ! Counters\&.
185 
186     iost    = 0
187     print *,'I: Reading data from ',inputfile
188 
189     !
190     ! Open the data file\&. Be cautious, and don't let the file be written to\&.
191     !
192     OPEN (unit=100, iostat=iost, err=9999, file=inputfile, status='OLD', access='SEQUENTIAL', form='FORMATTED', action='READ')
193 
194     !
195     ! Read the file headers\&.
196     !
197     READ (fmt='(A64)', unit=100, err=9999, iostat=iost) instrument         ! Name of the instrument producing the data\&.
198     READ (fmt='(I6)', unit=100, err=9999, iostat=iost) nv                  ! Number of variables\&.
199     READ (fmt='(I6)', unit=100, err=9999, iostat=iost) nst                 ! Number of stations\&.
200     READ (fmt='(I6)', unit=100, err=9999, iostat=iost) nt                  ! Number of time steps\&.
201 
202     !
203     ! Allocate enough space in the data arrays\&. We might as well be paranoid, and check if the arrays have already been
204     ! allocated (and if so, deallocate them)\&.
205     !
206     IF (ALLOCATED(v))   DEALLOCATE(v)
207     IF (ALLOCATED(st))  DEALLOCATE(st)
208     IF (ALLOCATED(lon)) DEALLOCATE(lon)
209     IF (ALLOCATED(lat)) DEALLOCATE(lat)
210     IF (ALLOCATED(d))   DEALLOCATE(d)
211 
212     ALLOCATE(v(nv), st(nst), lon(nst), lat(nst), t(nt), d(nv,nst,nt), stat=memst)
213     IF (memst \&.NE\&. 0) THEN
214         print *,'E: Unable to allocate memory to hold 2D data'
215         stop '1'
216     END IF
217 
218     !
219     ! Read the data arrays\&.
220     !
221     READ (fmt='(A64)', unit=100, err=9999, iostat=iost) (v(ii), ii=1,nv)       ! Read the variable names\&.
222     READ (fmt='(A64)', unit=100, err=9999, iostat=iost) (st(ii), ii=1,nst)     ! Read the station names\&.
223     READ (fmt='(F10\&.5)', unit=100, err=9999, iostat=iost) (lon(ii), ii=1,nst)  ! Read the station longitudes\&.
224     READ (fmt='(F10\&.5)', unit=100, err=9999, iostat=iost) (lat(ii), ii=1,nst)  ! Read the station latitudes\&.
225     READ (fmt='(F10\&.5)', unit=100, err=9999, iostat=iost) (t(ii), ii=1,nt)     ! Read the times\&.
226 
227     !
228     ! Read all the data\&. Don't know how (or if) this can be done with an implicit do loop, therefore will do it the old fashioned
229     ! way\&.
230     !
231     DO kk=1,nt
232         DO jj=1,nst
233             DO ii=1,nv
234                 READ(fmt='(F10\&.3)', unit=100, err=9999, iostat=iost) d(ii,jj,kk)
235             END DO
236         END DO
237     END DO
238 
239     !
240     ! Close the data file\&.
241     !
242     CLOSE (unit=100, err=9999, iostat=iost, status='KEEP')
243 
244     !
245     ! The next block of code deals with IO errors (if they occurred)\&.
246     !
247     9999 CONTINUE
248     IF (iost \&.GT\&. 0) THEN
249         print *,'E: An IO error occurred while reading ',inputfile
250         stop '1'
251     END IF
252 
.fi
.SS "subroutine io::ipt_vht (character (len=*), intent(in) INPUTFILE, character (len=64), intent(out) INSTRUMENT, integer (kind=ik4), intent(out) NV, integer (kind=ik4), intent(out) NP, integer (kind=ik4), intent(out) NST, integer (kind=ik4), intent(out) NT, character (len=64), dimension(:), intent(out), allocatable V, real (kind=rk8), dimension(:), intent(out), allocatable P, character (len=64), dimension(:), intent(out), allocatable ST, real (kind=rk8), dimension(:), intent(out), allocatable T, real (kind=rk8), dimension(:,:,:,:), intent(out), allocatable D)"

.PP
Definition at line 46 of file io\&.f90\&.
.PP
.nf
46     USE portable
47 
48     IMPLICIT NONE
49     CHARACTER (LEN=*), INTENT(IN)                                       :: inputfile    ! Name of the input file\&.
50     CHARACTER (LEN=64), INTENT(OUT)                                     :: instrument   ! Instrument name\&.
51     INTEGER (KIND=IK4), INTENT(OUT)                                     :: nv           ! Number of variables?
52     INTEGER (KIND=IK4), INTENT(OUT)                                     :: np           ! Number of pressure levels\&.
53     INTEGER (KIND=IK4), INTENT(OUT)                                     :: nst          ! Number of stations\&.
54     INTEGER (KIND=IK4), INTENT(OUT)                                     :: nt           ! Number of time steps\&.
55     CHARACTER (LEN=64), DIMENSION(:), ALLOCATABLE, INTENT(OUT)          :: v            ! Variable names?
56     REAL (KIND=RK8), DIMENSION(:), ALLOCATABLE, INTENT(OUT)             :: p            ! Values of the pressure levels\&.
57     CHARACTER (LEN=64), DIMENSION(:), ALLOCATABLE, INTENT(OUT)          :: st           ! Station names?
58     REAL (KIND=RK8), DIMENSION(:), ALLOCATABLE, INTENT(OUT)             :: t            ! Time values?
59     REAL (KIND=RK8), DIMENSION(:,:,:,:), ALLOCATABLE, INTENT(OUT)       :: d            ! The data\&.
60 
61     !
62     ! Local variables\&.
63     !
64     INTEGER (KIND=IK4)                                                  :: iost         ! IO status (0 (OK) or +ve (error))
65     INTEGER (KIND=IK4)                                                  :: memst        ! Status from ALLOCATE commands\&.
66     INTEGER (KIND=IK4)                                                  :: ii,jj,kk,ll  ! Counters
67 
68     iost = 0
69     print *,'I: Reading data from ',inputfile
70 
71     !
72     ! Open the data file\&. Be cautious, and don't let the file be written to\&.
73     !
74     OPEN (unit=100, iostat=iost, err=9999, file=inputfile, status='OLD', access='SEQUENTIAL', form='FORMATTED', action='READ')
75 
76     !
77     ! Read the file headers\&.
78     !
79     READ (fmt='(A64)', unit=100, err=9999, iostat=iost) instrument         ! Name of the instrument producing the data\&.
80     READ (fmt='(I6)', unit=100, err=9999, iostat=iost) nv                  ! Number of variables\&.
81     READ (fmt='(I6)', unit=100, err=9999, iostat=iost) np                  ! Number of pressure levels\&.
82     READ (fmt='(I6)', unit=100, err=9999, iostat=iost) nst                 ! Number of stations\&.
83     READ (fmt='(I6)', unit=100, err=9999, iostat=iost) nt                  ! Number of time steps\&.
84 
85     !
86     ! Allocate enough space in the data arrays\&. We might as well be paranoid, and check if the arrays have already been
87     ! allocated (and if so, deallocate them)\&.
88     !
89     IF (ALLOCATED(v))   DEALLOCATE(v)
90     IF (ALLOCATED(p))   DEALLOCATE(p)
91     IF (ALLOCATED(st))  DEALLOCATE(st)
92     IF (ALLOCATED(t))   DEALLOCATE(t)
93     IF (ALLOCATED(d))   DEALLOCATE(d)
94 
95     ALLOCATE(v(nv), p(np), st(nst), t(nt), d(nv,np,nst,nt), stat=memst)
96     IF (memst \&.NE\&. 0) THEN
97         print *,'E: Unable to allocate memory to hold 3D data'
98         stop '1'
99     END IF
100 
101     !
102     ! Read the data arrays\&.
103     !
104     READ (fmt='(A64)', unit=100, err=9999, iostat=iost) (v(ii), ii=1,nv)       ! Read the variable names\&.
105     READ (fmt='(F7\&.2)', unit=100, err=9999, iostat=iost) (p(ii), ii=1,np)      ! Read the pressure levels\&.
106     READ (fmt='(A64)', unit=100, err=9999, iostat=iost) (st(ii), ii=1,nst)     ! Read the station names\&.
107     READ (fmt='(F10\&.5)', unit=100, err=9999, iostat=iost) (t(ii), ii=1,nt)     ! Read the times\&.
108 
109     !
110     ! Read all the data\&. Don't know how (or if) this can be done with an implicit do loop, therefore will do it the old fashioned
111     ! way\&.
112     !
113     DO ll=1,nt
114         DO kk=1,nst
115             DO jj=1,np
116                 DO ii=1,nv
117                     READ(fmt='(F10\&.3)', unit=100, err=9999, iostat=iost) d(ii,jj,kk,ll)
118                 END DO
119             END DO
120         END DO
121     END DO
122 
123     !
124     ! Close the data file\&.
125     !
126     CLOSE (unit=100, err=9999, iostat=iost, status='KEEP')
127 
128     !
129     ! The next block of code deals with IO errors (if they occurred)\&.
130     !
131     9999 CONTINUE
132     IF (iost \&.GT\&. 0) THEN
133         print *,'E: An IO error occurred while reading ',inputfile
134         stop '1'
135     END IF
136 
.fi
.SS "subroutine io::opt_2d_netcdf (character (len=*), intent(in) OUTPUTFILE, real (kind=rk8), dimension(:), intent(in) T, real (kind=rk8), dimension(:), intent(in) BAR_PRES, real (kind=rk8), dimension(:), intent(in) ADPS, real (kind=rk8), dimension(:), intent(in) PRECIP, real (kind=rk8), dimension(:), intent(in) LPRECIP, real (kind=rk8), dimension(:), intent(in) EVAPOR, real (kind=rk8), dimension(:), intent(in) SHF, real (kind=rk8), dimension(:), intent(in) RL, real (kind=rk8), dimension(:), intent(in) RADIATIONT, real (kind=rk8), dimension(:), intent(in) RADIATIONB, real (kind=rk8), dimension(:), intent(in) RADIATION, real (kind=rk8), dimension(:), intent(in) TAOX, real (kind=rk8), dimension(:), intent(in) TAOY)"

.PP
Definition at line 1287 of file io\&.f90\&.
.PP
.nf
1287     USE portable
1288     USE netcdf
1289 
1290     IMPLICIT NONE
1291 
1292     CHARACTER (LEN=*), INTENT(IN)                                       :: outputfile   ! Name of the output file\&.
1293     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: t            ! Time\&.
1294     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: bar_pres     ! Barometric pressure (hPa)\&.
1295     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: adps         ! V\&.grad(PS)
1296     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: precip
1297     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: lprecip
1298     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: evapor
1299     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: shf
1300     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: rl
1301     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: radiationt
1302     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: radiationb
1303     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: radiation
1304     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: taox
1305     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: taoy
1306 
1307     !
1308     ! Local variables\&.
1309     !
1310     INTEGER (KIND=IK4)          :: ncid                                                 ! ID of NetCDF file\&.
1311     INTEGER (KIND=IK4)          :: t_dim_id                                             ! Time dimension ID\&.
1312     INTEGER (KIND=IK4)          :: t_var_id                                             ! Time coordinate variable\&.
1313     INTEGER (KIND=IK4)          :: bar_pres_var_id
1314     INTEGER (KIND=IK4)          :: adps_var_id
1315     INTEGER (KIND=IK4)          :: precip_var_id
1316     INTEGER (KIND=IK4)          :: lprecip_var_id
1317     INTEGER (KIND=IK4)          :: evapor_var_id
1318     INTEGER (KIND=IK4)          :: shf_var_id
1319     INTEGER (KIND=IK4)          :: rl_var_id
1320     INTEGER (KIND=IK4)          :: radiationt_var_id
1321     INTEGER (KIND=IK4)          :: radiationb_var_id
1322     INTEGER (KIND=IK4)          :: radiation_var_id
1323     INTEGER (KIND=IK4)          :: taox_var_id
1324     INTEGER (KIND=IK4)          :: taoy_var_id
1325     INTEGER (KIND=IK4)          :: iost                                                 ! I/O status\&.
1326     LOGICAL                     :: ncerror                                               ! Did a NetCDF function fail?
1327 
1328     iost    = nf90_noerr
1329     ncerror = \&.false\&.
1330     !
1331     ! Create the NetCDF file\&.
1332     !
1333     iost    = nf90_create(outputfile, nf90_noclobber, ncid)
1334     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1335 
1336     !
1337     ! Define the dimensions\&.
1338     !
1339     iost    = nf90_def_dim(ncid, "time", SIZE(t), t_dim_id)                          ! Time steps\&.
1340     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1341 
1342     !
1343     ! Define the variables\&.
1344     !
1345     ncerror = \&.false\&.
1346     ncerror = (nf90_def_var(ncid, "time", nf90_double, (/ t_dim_id /), t_var_id)                    \&.NE\&. nf90_noerr)
1347     ncerror = (nf90_def_var(ncid, "bar_pres", nf90_double, (/ t_dim_id /), bar_pres_var_id)         \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1348     ncerror = (nf90_def_var(ncid, "adps", nf90_double, (/ t_dim_id /), adps_var_id)                 \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1349     ncerror = (nf90_def_var(ncid, "precip", nf90_double, (/ t_dim_id /), precip_var_id)             \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1350     ncerror = (nf90_def_var(ncid, "lprecip", nf90_double, (/ t_dim_id /), lprecip_var_id)           \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1351     ncerror = (nf90_def_var(ncid, "evapor", nf90_double, (/ t_dim_id /), evapor_var_id)             \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1352     ncerror = (nf90_def_var(ncid, "shf", nf90_double, (/ t_dim_id /), shf_var_id)                   \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1353     ncerror = (nf90_def_var(ncid, "rl", nf90_double, (/ t_dim_id /), rl_var_id)                     \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1354     ncerror = (nf90_def_var(ncid, "radiationt", nf90_double, (/ t_dim_id /), radiationt_var_id)     \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1355     ncerror = (nf90_def_var(ncid, "radiationb", nf90_double, (/ t_dim_id /), radiationb_var_id)     \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1356     ncerror = (nf90_def_var(ncid, "radiation", nf90_double, (/ t_dim_id /), radiation_var_id)       \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1357     ncerror = (nf90_def_var(ncid, "taox", nf90_double, (/ t_dim_id /), taox_var_id)                 \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1358     ncerror = (nf90_def_var(ncid, "taoy", nf90_double, (/ t_dim_id /), taoy_var_id)                 \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1359     IF (ncerror) GO TO 9999
1360 
1361     !
1362     ! Create various attributes\&. Make sure strings are null terminated (for C programs)\&.
1363     !
1364     ncerror = \&.false\&.
1365     ncerror = (nf90_put_att(ncid, t_var_id, "long_name", 'Time'//char(0))                           \&.NE\&. nf90_noerr)
1366     ncerror = (nf90_put_att(ncid, t_var_id, "units", 'Days since 2004-12-31T00:00:00 UTC'//char(0)) \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1367     ncerror = (nf90_put_att(ncid, t_var_id, "missing_value", nf90_fill_double)                      \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1368     ncerror = (nf90_put_att(ncid, bar_pres_var_id, "long_name", 'Barometric pressure'//char(0))     \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1369     ncerror = (nf90_put_att(ncid, bar_pres_var_id, "units", 'Pa'//char(0))                          \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1370     ncerror = (nf90_put_att(ncid, bar_pres_var_id, "missing_value", nf90_fill_double)               \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1371     ncerror = (nf90_put_att(ncid, adps_var_id, "long_name", 'V\&.grad(Ps)'//char(0))                  \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1372     ncerror = (nf90_put_att(ncid, adps_var_id, "units", 'Pa/s'//char(0))                            \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1373     ncerror = (nf90_put_att(ncid, adps_var_id, "missing_value", nf90_fill_double)                   \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1374     ncerror = (nf90_put_att(ncid, precip_var_id, "long_name", 'precip * Lv0/Cpd'//char(0))          \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1375     ncerror = (nf90_put_att(ncid, precip_var_id, "units", 'K/s'//char(0))                           \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1376     ncerror = (nf90_put_att(ncid, precip_var_id, "missing_value", nf90_fill_double)                 \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1377     ncerror = (nf90_put_att(ncid, lprecip_var_id, "long_name", 'precip *Lv/Cpd'//char(0))           \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1378     ncerror = (nf90_put_att(ncid, lprecip_var_id, "units", 'K/s'//char(0))                          \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1379     ncerror = (nf90_put_att(ncid, lprecip_var_id, "missing_value", nf90_fill_double)                \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1380     ncerror = (nf90_put_att(ncid, evapor_var_id, "long_name", 'Evaporation * Lv0/Cpd'//char(0))     \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1381     ncerror = (nf90_put_att(ncid, evapor_var_id, "units", 'K/s'//char(0))                           \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1382     ncerror = (nf90_put_att(ncid, evapor_var_id, "missing_value", nf90_fill_double)                 \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1383     ncerror = (nf90_put_att(ncid, shf_var_id, "long_name", 'Sensible heating rate'//char(0))        \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1384     ncerror = (nf90_put_att(ncid, shf_var_id, "units", 'K/s'//char(0))                              \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1385     ncerror = (nf90_put_att(ncid, shf_var_id, "missing_value", nf90_fill_double)                    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1386     ncerror = (nf90_put_att(ncid, rl_var_id, "long_name", 'Rl * Lv0/Cpd'//char(0))                  \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1387     ncerror = (nf90_put_att(ncid, rl_var_id, "units", 'K/s'//char(0))                               \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1388     ncerror = (nf90_put_att(ncid, rl_var_id, "missing_value", nf90_fill_double)                     \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1389     ncerror = (nf90_put_att(ncid, radiationt_var_id, "long_name", 'Radiative heating-TOA'//char(0)) \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1390     ncerror = (nf90_put_att(ncid, radiationt_var_id, "units", 'K/s'//char(0))                       \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1391     ncerror = (nf90_put_att(ncid, radiationt_var_id, "missing_value", nf90_fill_double)             \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1392     ncerror = (nf90_put_att(ncid, radiationb_var_id, "long_name", 'Radiative heating-SFC'//char(0)) \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1393     ncerror = (nf90_put_att(ncid, radiationb_var_id, "units", 'K/s'//char(0))                       \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1394     ncerror = (nf90_put_att(ncid, radiationb_var_id, "missing_value", nf90_fill_double)             \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1395     ncerror = (nf90_put_att(ncid, radiation_var_id, "long_name", 'Radiative heating-COL'//char(0))  \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1396     ncerror = (nf90_put_att(ncid, radiation_var_id, "units", 'K/s'//char(0))                        \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1397     ncerror = (nf90_put_att(ncid, radiation_var_id, "missing_value", nf90_fill_double)              \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1398     ncerror = (nf90_put_att(ncid, taox_var_id, "long_name", 'X-shearing stress'//char(0))           \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1399     ncerror = (nf90_put_att(ncid, taox_var_id, "units", 'N'//char(0))                               \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1400     ncerror = (nf90_put_att(ncid, taox_var_id, "missing_value", nf90_fill_double)                   \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1401     ncerror = (nf90_put_att(ncid, taoy_var_id, "long_name", 'Y-shearing stress'//char(0))           \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1402     ncerror = (nf90_put_att(ncid, taoy_var_id, "units", 'N'//char(0))                               \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1403     ncerror = (nf90_put_att(ncid, taoy_var_id, "missing_value", nf90_fill_double)                   \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1404     IF (ncerror) GO TO 9999
1405 
1406     !
1407     ! We've finished defining stuff, leave the definition mode\&.
1408     !
1409     iost    = nf90_enddef(ncid)
1410     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1411 
1412     !
1413     ! Write the data\&.
1414     !
1415     ncerror = \&.false\&.
1416     ncerror = (nf90_put_var(ncid, t_var_id, t)                      \&.NE\&. nf90_noerr)
1417     ncerror = (nf90_put_var(ncid, bar_pres_var_id, bar_pres)        \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1418     ncerror = (nf90_put_var(ncid, adps_var_id, adps)                \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1419     ncerror = (nf90_put_var(ncid, precip_var_id, precip)            \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1420     ncerror = (nf90_put_var(ncid, lprecip_var_id, lprecip)          \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1421     ncerror = (nf90_put_var(ncid, evapor_var_id, evapor)            \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1422     ncerror = (nf90_put_var(ncid, shf_var_id, shf)                  \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1423     ncerror = (nf90_put_var(ncid, rl_var_id, rl)                    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1424     ncerror = (nf90_put_var(ncid, radiationt_var_id, radiationt)    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1425     ncerror = (nf90_put_var(ncid, radiationb_var_id, radiationb)    \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1426     ncerror = (nf90_put_var(ncid, radiation_var_id, radiation)      \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1427     ncerror = (nf90_put_var(ncid, taox_var_id, taox)                \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1428     ncerror = (nf90_put_var(ncid, taoy_var_id, taoy)                \&.NE\&. nf90_noerr) \&.OR\&. ncerror
1429     IF (ncerror) GO TO 9999
1430 
1431     !
1432     ! Close the NetCDF file\&.
1433     !
1434     iost    = nf90_close(ncid)
1435     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1436 
1437     !
1438     ! Catch any NetCDF errors here\&.
1439     !
1440     9999 CONTINUE
1441     IF (ncerror) THEN
1442         print *,'E: NetCDF error encountered'
1443         IF (iost \&.NE\&. nf90_noerr) THEN
1444             print *, trim(nf90_strerror(iost))
1445         END IF
1446         stop '1'
1447     END IF
1448 
.fi
.SS "subroutine io::opt_3d_netcdf (character (len=*), intent(in) OUTPUTFILE, real (kind=rk8), dimension(:,:,:,:), intent(in) DU, character (len=64), dimension(:), intent(in) VU, real (kind=rk8), dimension(:,:,:), intent(in) DS, real (kind=rk8), dimension(:), intent(in) P, real (kind=rk8), dimension(:), intent(in) T, character (len=64), dimension(:), intent(in) STN, real (kind=rk8), dimension(:), intent(in) WEIGHT, integer (kind=ik4), dimension(:,:), intent(in) BOUNDARY, integer (kind=ik4), dimension(:), intent(in) STRU, integer (kind=ik4), dimension(:), intent(in) STRS)"

.PP
Definition at line 416 of file io\&.f90\&.
.PP
.nf
416     USE portable
417     USE netcdf
418 
419     IMPLICIT NONE
420 
421     CHARACTER (LEN=*), INTENT(IN)                                       :: outputfile   ! Name of the output file\&.
422     CHARACTER (LEN=64), DIMENSION(:), INTENT(IN)                        :: vu           ! Names of the variables in DU\&.
423     REAL (KIND=RK8), DIMENSION(:,:,:), INTENT(IN)                       :: ds           ! Surface level data\&.
424     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: p            ! Pressure levels\&.
425     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: t            ! Time steps\&.          
426     CHARACTER (LEN=64), DIMENSION(:), INTENT(IN)                        :: stn          ! Names of the stations\&.
427     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: weight       ! Weights for each station\&.
428     INTEGER (KIND=IK4), DIMENSION(:,:), INTENT(IN)                      :: boundary     ! BOUNDARY array\&.
429     INTEGER (KIND=IK4), DIMENSION(:), INTENT(IN)                        :: stru         ! STRU array\&.
430     INTEGER (KIND=IK4), DIMENSION(:), INTENT(IN)                        :: strs         ! STRS array\&.
431     !
432     ! Local variables\&.
433     !
434     INTEGER (KIND=IK4)          :: ncid                                                 ! ID of NetCDF file\&.
435     INTEGER (KIND=IK4)          :: v_dim_id, p_dim_id, st_dim_id, t_dim_id, str_dim_id, bnd_dim_id
436     INTEGER (KIND=IK4)          :: stru_dim_id, strs_dim_id, weight_dim_id
437     INTEGER (KIND=IK4)          :: v_var_id, p_var_id, st_var_id, t_var_id, du_var_id, ds_var_id, boundary_var_id
438     INTEGER (KIND=IK4)          :: stru_var_id, strs_var_id, weight_var_id
439     INTEGER (KIND=IK4)          :: iost                                                 ! I/O status\&.
440     INTEGER (KIND=IK4)          :: ii                                                   ! Counter\&.
441     INTEGER (KIND=IK4)          :: strlen                                               ! String length\&.
442     CHARACTER (LEN=64)          :: tmpstr                                               ! Temporary string\&.
443     REAL (KIND=RK8), DIMENSION(:,:,:,:),INTENT(IN)                                 :: du           ! The 3D data\&.
444     iost    = nf90_noerr
445     !
446     ! Create the NetCDF file\&.
447     !
448     iost    = nf90_create(outputfile, nf90_noclobber, ncid)
449     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
450 
451     !
452     ! Define the dimensions\&.
453     !
454     iost    = nf90_def_dim(ncid, "variables", SIZE(du, dim=1), v_dim_id)    ! The data array contains many variables\&.
455     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
456 
457     iost    = nf90_def_dim(ncid, "levels", SIZE(du, dim=2), p_dim_id)       ! Vertical levels\&.
458     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
459 
460     iost    = nf90_def_dim(ncid, "stations", SIZE(du, dim=3), st_dim_id)    ! Stations\&.
461     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
462 
463     iost    = nf90_def_dim(ncid, "time", SIZE(du, dim=4), t_dim_id)         ! Time steps\&.
464     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
465 
466     iost    = nf90_def_dim(ncid, "string", 64, str_dim_id)                  ! This dimension is used for character strings\&.
467     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
468 
469     iost    = nf90_def_dim(ncid, "bnd", SIZE(boundary, dim=1), bnd_dim_id)  ! This dimension is used for the BOUNDARY array\&.
470     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
471 
472     iost    = nf90_def_dim(ncid, "stru", SIZE(stru), stru_dim_id)           ! This dimension is used for the STRU array\&.
473     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
474 
475     iost    = nf90_def_dim(ncid, "strs", SIZE(strs), strs_dim_id)           ! This dimension is used for the STRS array\&.
476     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
477 
478     iost    = nf90_def_dim(ncid, "weight", SIZE(weight), weight_dim_id)     ! This dimension is used for the WEIGHT array\&.
479     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
480 
481     !
482     ! Define the variables\&.
483     !
484     iost    = nf90_def_var(ncid, "variables", nf90_char, (/ str_dim_id, v_dim_id /), v_var_id)
485     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
486 
487     iost    = nf90_def_var(ncid, "levels", nf90_double, (/ p_dim_id /), p_var_id)
488     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
489 
490     iost    = nf90_def_var(ncid, "stations", nf90_char, (/ str_dim_id, st_dim_id /), st_var_id)
491     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
492 
493     iost    = nf90_def_var(ncid, "time", nf90_double, (/ t_dim_id /), t_var_id)
494     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
495 
496     iost    = nf90_def_var(ncid, "du", nf90_double, (/ v_dim_id, p_dim_id, st_dim_id, t_dim_id /), du_var_id)
497     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
498 
499     iost    = nf90_def_var(ncid, "ds", nf90_double, (/ v_dim_id, st_dim_id, t_dim_id /), ds_var_id)
500     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
501 
502     iost    = nf90_def_var(ncid, "boundary", nf90_int, (/ bnd_dim_id, t_dim_id /), boundary_var_id)
503     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
504 
505     iost    = nf90_def_var(ncid, "stru", nf90_int, (/ stru_dim_id /), stru_var_id)
506     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
507 
508     iost    = nf90_def_var(ncid, "strs", nf90_int, (/ strs_dim_id /), strs_var_id)
509     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
510 
511     iost    = nf90_def_var(ncid, "weight", nf90_double, (/ weight_dim_id /), weight_var_id)
512     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
513 
514     !
515     ! Create various attributes\&. Make sure strings are null terminated (for C programs)\&.
516     !
517 !    IOST    = NF90_PUT_ATT(NCID, NF90_GLOBAL, "instrument", TRIM(INSTRUMENT)//CHAR(0))
518 !    IF (IOST \&.NE\&. NF90_NOERR) GO TO 9999
519     iost    = nf90_put_att(ncid, t_var_id, "units", 'Days since 2004-10-01T00:00:00 UTC'//char(0))
520     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
521     iost    = nf90_put_att(ncid, p_var_id, "units", 'hPa'//char(0))
522     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
523 
524     !
525     ! We've finished defining stuff, leave the definition mode\&.
526     !
527     iost    = nf90_enddef(ncid)
528     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
529 
530     !
531     ! Write the names of the variables\&. Terminate strings with a null byte, in case the data are subsequently read by a C program\&.
532     !
533     IF (SIZE(du, dim=1) \&.NE\&. SIZE(vu)) THEN
534         print *,'E: Size of variable dimension in DU is different than VU'
535         stop '1'
536     END IF
537 
538     DO ii=1,SIZE(du, dim=1)
539         tmpstr      = trim(vu(ii))
540         strlen      = min(63, len_trim(tmpstr))           ! The characters after this positon will be replaced by null characters\&.
541         tmpstr(strlen+1:64)    = repeat(char(0), 64-strlen)
542         iost        = nf90_put_var(ncid, v_var_id, tmpstr, (/ 1, ii /), (/ 64, 1 /))
543         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
544     END DO
545 
546     !
547     ! Write the names of the stations\&. Terminate strings with a null byte, in case the data are subsequently read by a C program\&.
548     !
549     DO ii=1,SIZE(du, dim=3)
550         tmpstr  = trim(stn(ii))
551         strlen  = min(63, len_trim(tmpstr))           ! The characters after this positon will be replaced by null characters\&.
552         tmpstr(strlen+1:64)    = repeat(char(0), 64-strlen)
553         iost    = nf90_put_var(ncid, st_var_id, tmpstr, (/ 1, ii /), (/ 64, 1 /))
554         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
555     END DO
556 
557     !
558     ! Write the pressure levels\&.
559     !
560     iost    = nf90_put_var(ncid, p_var_id, p)
561     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
562 
563     !
564     ! Write the time steps\&.
565     !
566     iost    = nf90_put_var(ncid, t_var_id, t)
567     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
568 
569     !
570     ! Write the data arrays\&.
571     !
572     iost    = nf90_put_var(ncid, du_var_id, du)
573     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
574 
575     iost    = nf90_put_var(ncid, ds_var_id, ds)
576     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
577 
578     iost    = nf90_put_var(ncid, boundary_var_id, boundary)
579     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
580 
581     iost    = nf90_put_var(ncid, stru_var_id, stru)
582     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
583 
584     iost    = nf90_put_var(ncid, strs_var_id, strs)
585     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
586 
587     iost    = nf90_put_var(ncid, weight_var_id, weight)
588     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
589 
590     !
591     ! Close the NetCDF file\&.
592     !
593     iost    = nf90_close(ncid)
594     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
595 
596     !
597     ! Catch any NetCDF errors here\&.
598     !
599     9999 CONTINUE
600     IF (iost \&.NE\&. nf90_noerr) THEN
601         print *,'E: Problem creating NetCDF file ',outputfile
602         print *, trim(nf90_strerror(iost))
603         stop '1'
604     END IF
605 
.fi
.SS "subroutine io::opt_budget_netcdf (character (len=*), intent(in) OUTPUTFILE, real (kind=rk8), dimension(:,:,:), intent(in) BUDGET_COLUMN, real (kind=rk8), dimension(:,:,:,:), intent(in) BUDGET_LAYER, character (len=64), dimension(:,:), intent(in) VBUDGET_COLUMN, character (len=64), dimension(:,:), intent(in) VBUDGET_LAYER, real (kind=rk8), dimension(:), intent(in) AVE_QS, real (kind=rk8), dimension(:), intent(in) AVE_SS, real (kind=rk8), dimension(:), intent(in) P, real (kind=rk8), dimension(:), intent(in) T)"

.PP
Definition at line 893 of file io\&.f90\&.
.PP
.nf
893     USE portable
894     USE netcdf
895 
896     IMPLICIT NONE
897 
898     CHARACTER (LEN=*), INTENT(IN)                                       :: outputfile       ! Name of the output file\&.
899     REAL (KIND=RK8), DIMENSION(:,:,:), INTENT(IN)                       :: budget_column
900     REAL (KIND=RK8), DIMENSION(:,:,:,:), INTENT(IN)                     :: budget_layer
901     CHARACTER (LEN=64), DIMENSION(:,:), INTENT(IN)                      :: vbudget_column
902     CHARACTER (LEN=64), DIMENSION(:,:), INTENT(IN)                      :: vbudget_layer
903     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: ave_qs
904     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: ave_ss
905     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: p
906     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: t
907 
908     !
909     ! Local variables\&.
910     !
911     INTEGER (KIND=IK4)          :: ncid                                                 ! ID of NetCDF file\&.
912     INTEGER (KIND=IK4)          :: bcv_dim_id, bct_dim_id, blv_dim_id, blt_dim_id, p_dim_id, t_dim_id, str_dim_id
913     INTEGER (KIND=IK4)          :: bc_var_id, bl_var_id, vbc_var_id, vbl_var_id, ave_qs_var_id, ave_ss_var_id, p_var_id, t_var_id
914     INTEGER (KIND=IK4)          :: iost                                                 ! I/O status\&.
915     INTEGER (KIND=IK4)          :: ii, jj                                               ! Counter\&.
916     INTEGER (KIND=IK4)          :: strlen                                               ! String length\&.
917     CHARACTER (LEN=64)          :: tmpstr                                               ! Temporary string\&.
918 
919     !
920     ! Create the NetCDF file\&.
921     !
922     iost    = nf90_noerr
923     iost    = nf90_create(outputfile, nf90_noclobber, ncid)
924     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
925 
926     !
927     ! Define the dimensions\&.
928     !
929     iost    = nf90_def_dim(ncid, "bcv", SIZE(budget_column, dim=1), bcv_dim_id)
930     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
931 
932     iost    = nf90_def_dim(ncid, "bct", SIZE(budget_column, dim=2), bct_dim_id)
933     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
934 
935     iost    = nf90_def_dim(ncid, "blv", SIZE(budget_layer, dim=1), blv_dim_id)
936     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
937 
938     iost    = nf90_def_dim(ncid, "blt", SIZE(budget_layer, dim=2), blt_dim_id)
939     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
940 
941     iost    = nf90_def_dim(ncid, "levels", SIZE(p, dim=1), p_dim_id)
942     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
943 
944     iost    = nf90_def_dim(ncid, "time", SIZE(t, dim=1), t_dim_id)
945     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
946 
947     iost    = nf90_def_dim(ncid, "string", 64, str_dim_id)                  ! This dimension is used for character strings\&.
948     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
949 
950     !
951     ! Define the variables\&.
952     !
953     iost    = nf90_def_var(ncid, "budget_column", nf90_double, (/ bcv_dim_id, bct_dim_id, t_dim_id /), bc_var_id)
954     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
955 
956     iost    = nf90_def_var(ncid, "budget_layer", nf90_double, (/ blv_dim_id, blt_dim_id, p_dim_id, t_dim_id /), bl_var_id)
957     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
958 
959     iost    = nf90_def_var(ncid, "vbudget_column", nf90_char, (/ str_dim_id, bcv_dim_id, bct_dim_id /), vbc_var_id)
960     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
961 
962     iost    = nf90_def_var(ncid, "vbudget_layer", nf90_char, (/ str_dim_id, blv_dim_id, blt_dim_id /), vbl_var_id)
963     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
964 
965     iost    = nf90_def_var(ncid, "ave_qs", nf90_double, (/ t_dim_id /), ave_qs_var_id)
966     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
967 
968     iost    = nf90_def_var(ncid, "ave_ss", nf90_double, (/ t_dim_id /), ave_ss_var_id)
969     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
970 
971     iost    = nf90_def_var(ncid, "levels", nf90_double, (/ p_dim_id /), p_var_id)
972     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
973 
974     iost    = nf90_def_var(ncid, "time", nf90_double, (/ t_dim_id /), t_var_id)
975     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
976 
977     !
978     ! Create various attributes\&. Make sure strings are null terminated (for C programs)\&.
979     !
980     iost    = nf90_put_att(ncid, t_var_id, "units", 'Days since 2004-10-01T00:00:00 UTC'//char(0))
981     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
982     iost    = nf90_put_att(ncid, p_var_id, "units", 'hPa'//char(0))
983     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
984 
985     !
986     ! We've finished defining stuff, leave the definition mode\&.
987     !
988     iost    = nf90_enddef(ncid)
989     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
990 
991     !
992     ! Write VBUDGET_COLUMN and VBUDGET_LAYER\&. Terminate strings with a null byte, in case the data are subsequently 
993     ! read by a C program\&.
994     !
995     DO ii=1,SIZE(budget_column, dim=1)
996         DO jj=1,SIZE(budget_column, dim=2)
997             tmpstr      = trim(vbudget_column(ii,jj))
998             strlen      = min(63, len_trim(tmpstr))         ! The characters after this positon will be replaced by null characters\&.
999             tmpstr(strlen+1:64)    = repeat(char(0), 64-strlen)
1000             iost        = nf90_put_var(ncid, vbc_var_id, tmpstr, (/ 1, ii, jj /), (/ 64, 1, 1 /))
1001             IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1002         END DO
1003     END DO
1004 
1005     DO ii=1,SIZE(budget_layer, dim=1)
1006         DO jj=1,SIZE(budget_layer, dim=2)
1007             tmpstr      = trim(vbudget_layer(ii,jj))
1008             strlen      = min(63, len_trim(tmpstr))         ! The characters after this positon will be replaced by null characters\&.
1009             tmpstr(strlen+1:64)    = repeat(char(0), 64-strlen)
1010             iost        = nf90_put_var(ncid, vbl_var_id, tmpstr, (/ 1, ii, jj /), (/ 64, 1, 1 /))
1011             IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1012         END DO
1013     END DO
1014 
1015     !
1016     ! Write the pressure levels\&.
1017     !
1018     iost    = nf90_put_var(ncid, p_var_id, p)
1019     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1020 
1021     !
1022     ! Write the time steps\&.
1023     !
1024     iost    = nf90_put_var(ncid, t_var_id, t)
1025     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1026 
1027     !
1028     ! Write the data arrays\&.
1029     !
1030     iost    = nf90_put_var(ncid, bc_var_id, budget_column)
1031     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1032 
1033     iost    = nf90_put_var(ncid, bl_var_id, budget_layer)
1034     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1035 
1036     iost    = nf90_put_var(ncid, ave_qs_var_id, ave_qs)
1037     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1038 
1039     iost    = nf90_put_var(ncid, ave_ss_var_id, ave_ss)
1040     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1041 
1042     !
1043     ! Close the NetCDF file\&.
1044     !
1045     iost    = nf90_close(ncid)
1046     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1047 
1048     !
1049     ! Catch any NetCDF errors here\&.
1050     !
1051     9999 CONTINUE
1052     IF (iost \&.NE\&. nf90_noerr) THEN
1053         print *,'E: Problem creating NetCDF file ',outputfile
1054         print *, trim(nf90_strerror(iost))
1055         stop '1'
1056     END IF
1057 
.fi
.SS "subroutine io::opt_forcing_netcdf (character (len=*), intent(in) OUTPUTFILE, real (kind=rk8), dimension(:,:), intent(in) SFC_DATA, real (kind=rk8), dimension(:,:,:), intent(in) ML_DATA, real (kind=rk4), intent(in) CF_LON, real (kind=rk4), intent(in) CF_LAT, real (kind=rk4), intent(in) CF_PHIS, real (kind=rk8), dimension(:), intent(in) PLEVS)"

.PP
Definition at line 1708 of file io\&.f90\&.
.PP
.nf
1708     USE portable
1709     USE netcdf
1710     USE time
1711 
1712     IMPLICIT NONE
1713 
1714     CHARACTER (LEN=*), INTENT(IN)                                       :: outputfile       ! Name of the output file\&.
1715     REAL (KIND=RK8), DIMENSION(:,:), INTENT(IN)                         :: sfc_data         ! Surface forcing data\&.
1716     REAL (KIND=RK8), DIMENSION(:,:,:), INTENT(IN)                       :: ml_data          ! Multi-levcel forcing data\&.
1717     REAL (KIND=RK4), INTENT(IN)                                         :: cf_lon           ! Central facility longitude\&.
1718     REAL (KIND=RK4), INTENT(IN)                                         :: cf_lat           ! Central facility latitude\&.
1719     REAL (KIND=RK4), INTENT(IN)                                         :: cf_phis          ! Central facility geopotential height\&.
1720     REAL (KIND=RK8), DIMENSION(:), INTENT(IN)                           :: plevs            ! Pressure levels in analysis\&.
1721 
1722     !
1723     ! Local variables\&.
1724     !
1725     INTEGER (KIND=IK4)                  :: ncid                                                 ! ID of NetCDF file\&.
1726     INTEGER (KIND=IK4)                  :: time_dim_id, lev_dim_id                              ! Dimension IDs\&.
1727     INTEGER (KIND=IK4)                  :: base_time_var_id                                     ! Variable ID for base_time
1728     INTEGER (KIND=IK4)                  :: time_var_id
1729     INTEGER (KIND=IK4)                  :: time_offset_var_id
1730     INTEGER (KIND=IK4)                  :: year_var_id
1731     INTEGER (KIND=IK4)                  :: month_var_id
1732     INTEGER (KIND=IK4)                  :: day_var_id
1733     INTEGER (KIND=IK4)                  :: hour_var_id
1734     INTEGER (KIND=IK4)                  :: minute_var_id
1735     INTEGER (KIND=IK4)                  :: lat_var_id
1736     INTEGER (KIND=IK4)                  :: lon_var_id
1737     INTEGER (KIND=IK4)                  :: phis_var_id
1738     INTEGER (KIND=IK4)                  :: lev_var_id
1739     INTEGER (KIND=IK4)                  :: temp_var_id
1740     INTEGER (KIND=IK4)                  :: q_var_id
1741     INTEGER (KIND=IK4)                  :: u_var_id
1742     INTEGER (KIND=IK4)                  :: v_var_id
1743     INTEGER (KIND=IK4)                  :: omega_var_id
1744     INTEGER (KIND=IK4)                  :: div_var_id
1745     INTEGER (KIND=IK4)                  :: tadvh_var_id
1746     INTEGER (KIND=IK4)                  :: tadvv_var_id
1747     INTEGER (KIND=IK4)                  :: qadvh_var_id
1748     INTEGER (KIND=IK4)                  :: qadvv_var_id
1749     INTEGER (KIND=IK4)                  :: s_var_id
1750     INTEGER (KIND=IK4)                  :: sadvh_var_id
1751     INTEGER (KIND=IK4)                  :: sadvv_var_id
1752     INTEGER (KIND=IK4)                  :: dsdt_var_id
1753     INTEGER (KIND=IK4)                  :: dtdt_var_id
1754     INTEGER (KIND=IK4)                  :: dqdt_var_id
1755     INTEGER (KIND=IK4)                  :: q1_var_id
1756     INTEGER (KIND=IK4)                  :: q2_var_id
1757     INTEGER (KIND=IK4)                  :: cld_var_id
1758     INTEGER (KIND=IK4)                  :: prec_var_id
1759     INTEGER (KIND=IK4)                  :: lh_var_id
1760     INTEGER (KIND=IK4)                  :: sh_var_id
1761     INTEGER (KIND=IK4)                  :: psa_var_id
1762     INTEGER (KIND=IK4)                  :: psi_var_id
1763     INTEGER (KIND=IK4)                  :: tsair_var_id
1764     INTEGER (KIND=IK4)                  :: tskin_var_id
1765     INTEGER (KIND=IK4)                  :: rhair_var_id
1766     INTEGER (KIND=IK4)                  :: wspd_var_id
1767     INTEGER (KIND=IK4)                  :: us_var_id
1768     INTEGER (KIND=IK4)                  :: vs_var_id
1769     INTEGER (KIND=IK4)                  :: srfrad_var_id
1770     INTEGER (KIND=IK4)                  :: flut_var_id
1771     INTEGER (KIND=IK4)                  :: fsnt_var_id
1772     INTEGER (KIND=IK4)                  :: solin_var_id
1773     INTEGER (KIND=IK4)                  :: cldlow_var_id
1774     INTEGER (KIND=IK4)                  :: cldmed_var_id
1775     INTEGER (KIND=IK4)                  :: cldhgh_var_id
1776     INTEGER (KIND=IK4)                  :: cldtot_var_id
1777     INTEGER (KIND=IK4)                  :: cldthk_var_id
1778     INTEGER (KIND=IK4)                  :: cldtop_var_id
1779     INTEGER (KIND=IK4)                  :: lwp_var_id
1780     INTEGER (KIND=IK4)                  :: cdh2odt_var_id
1781     INTEGER (KIND=IK4)                  :: ch2oadv_var_id
1782     INTEGER (KIND=IK4)                  :: evap_var_id
1783     INTEGER (KIND=IK4)                  :: cdsdt_var_id
1784     INTEGER (KIND=IK4)                  :: csadv_var_id
1785     INTEGER (KIND=IK4)                  :: crad_var_id
1786     INTEGER (KIND=IK4)                  :: clh_var_id
1787     INTEGER (KIND=IK4)                  :: omegas_var_id
1788     INTEGER (KIND=IK4)                  :: qs_var_id
1789     INTEGER (KIND=IK4)                  :: s2m_var_id
1790     INTEGER (KIND=IK4)                  :: pw_var_id
1791     INTEGER (KIND=IK4)                  :: flus_var_id
1792     INTEGER (KIND=IK4)                  :: flds_var_id
1793     INTEGER (KIND=IK4)                  :: fsus_var_id
1794     INTEGER (KIND=IK4)                  :: fsds_var_id
1795 
1796     INTEGER (KIND=IK4)                  :: nt                                                   ! Number of time steps\&.
1797     INTEGER (KIND=IK4)                  :: iost                                                 ! I/O status\&.
1798     INTEGER (KIND=IK4), DIMENSION(8)    :: date_time                                            ! Holds date and time components\&.
1799     CHARACTER (LEN=64)                  :: tmpstr                                               ! Temporary string\&.
1800 
1801     !
1802     ! Create the NetCDF file\&.
1803     !
1804     iost    = nf90_noerr
1805     iost    = nf90_create(outputfile, nf90_noclobber, ncid)
1806     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1807 
1808     !
1809     ! Define the dimensions\&.
1810     !
1811     nt      = SIZE(sfc_data, dim=2)                                                             ! Number of time steps\&.
1812     iost    = nf90_def_dim(ncid, "time", nt, time_dim_id)                                     ! Don't output first and last times\&.
1813     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1814 
1815     iost    = nf90_def_dim(ncid, "lev", SIZE(ml_data, dim=2), lev_dim_id)
1816     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1817 
1818     !
1819     ! Define the variables and attributes\&. Make sure that strings are null terminated (to be nice to C programs)\&.
1820     !
1821     iost    = nf90_def_var(ncid, "base_time", nf90_double, base_time_var_id)
1822     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1823     iost    = nf90_put_att(ncid, base_time_var_id, "long_name", 'Base time in Epoch'//char(0))
1824     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1825     iost    = nf90_put_att(ncid, base_time_var_id, "units", 'seconds since 1970-01-01T00:00:00Z'//char(0))
1826     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1827     WRITE(unit=tmpstr, fmt='(I4\&.4,"-",I2\&.2,"-",I2\&.2,"T",I2\&.2,":",I2\&.2,":",I2\&.2,"Z")') &
1828         & int(sfc_data(2,1)),int(sfc_data(3,1)),int(sfc_data(4,1)),int(sfc_data(5,1)),int(sfc_data(6,1)),0
1829     iost    = nf90_put_att(ncid, base_time_var_id, "string", tmpstr//char(0))
1830     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1831 
1832     iost    = nf90_def_var(ncid, "time", nf90_double, (/ time_dim_id /), time_var_id)
1833     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1834     WRITE(unit=tmpstr, fmt='(I4\&.4)') int(sfc_data(2,1))
1835     iost    = nf90_put_att(ncid, time_var_id, "long_name", 'Calendar day fraction of the year '//tmpstr//char(0))
1836     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1837     WRITE(unit=tmpstr, fmt='(I4\&.4,"-12-31")') int(sfc_data(2,1)-1)
1838     iost    = nf90_put_att(ncid, time_var_id, "units", 'days since '//tmpstr//char(0))
1839     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1840 !    IOST    = NF90_PUT_ATT(NCID, TIME_VAR_ID, "calendar", 'proleptic_gregorian'//CHAR(0))
1841 !    IF (IOST \&.NE\&. NF90_NOERR) GO TO 9999
1842     iost    = nf90_put_att(ncid, time_var_id, "axis", 'T'//char(0))
1843     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1844 
1845     iost    = nf90_def_var(ncid, "time_offset", nf90_double, (/ time_dim_id /), time_offset_var_id)
1846     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1847     iost    = nf90_put_att(ncid, time_offset_var_id, "long_name", 'Time offset from base_time'//char(0))
1848     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1849     WRITE(unit=tmpstr, fmt='(I4\&.4,"-",I2\&.2,"-",I2\&.2,"T",I2\&.2,":",I2\&.2,":",I2\&.2,"Z")') &
1850         & int(sfc_data(2,1)),int(sfc_data(3,1)),int(sfc_data(4,1)),int(sfc_data(5,1)),int(sfc_data(6,1)),0
1851     iost    = nf90_put_att(ncid, time_offset_var_id, "units", 'seconds since '//tmpstr//char(0))
1852     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1853 
1854     iost    = nf90_def_var(ncid, "year", nf90_int, (/ time_dim_id /), year_var_id)
1855     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1856     iost    = nf90_put_att(ncid, year_var_id, "long_name", 'Year'//char(0))
1857     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1858     iost    = nf90_put_att(ncid, year_var_id, "units", char(0))
1859     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1860     iost    = nf90_put_att(ncid, year_var_id, "missing_value", int(-9999, kind=ik4))
1861     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1862 
1863     iost    = nf90_def_var(ncid, "month", nf90_int, (/ time_dim_id /), month_var_id)
1864     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1865     iost    = nf90_put_att(ncid, month_var_id, "long_name", 'Month'//char(0))
1866     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1867     iost    = nf90_put_att(ncid, month_var_id, "units", char(0))
1868     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1869     iost    = nf90_put_att(ncid, month_var_id, "missing_value", int(-9999, kind=ik4))
1870     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1871 
1872     iost    = nf90_def_var(ncid, "day", nf90_int, (/ time_dim_id /), day_var_id)
1873     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1874     iost    = nf90_put_att(ncid, day_var_id, "long_name", 'Day'//char(0))
1875     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1876     iost    = nf90_put_att(ncid, day_var_id, "units", char(0))
1877     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1878     iost    = nf90_put_att(ncid, day_var_id, "missing_value", int(-9999, kind=ik4))
1879     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1880 
1881     iost    = nf90_def_var(ncid, "hour", nf90_int, (/ time_dim_id /), hour_var_id)
1882     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1883     iost    = nf90_put_att(ncid, hour_var_id, "long_name", 'Hour'//char(0))
1884     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1885     iost    = nf90_put_att(ncid, hour_var_id, "units", char(0))
1886     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1887     iost    = nf90_put_att(ncid, hour_var_id, "missing_value", int(-9999, kind=ik4))
1888     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1889 
1890     iost    = nf90_def_var(ncid, "minute", nf90_int, (/ time_dim_id /), minute_var_id)
1891     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1892     iost    = nf90_put_att(ncid, minute_var_id, "long_name", 'Minute'//char(0))
1893     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1894     iost    = nf90_put_att(ncid, minute_var_id, "units", char(0))
1895     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1896     iost    = nf90_put_att(ncid, minute_var_id, "missing_value", int(-9999, kind=ik4))
1897     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1898 
1899     iost    = nf90_def_var(ncid, "lat", nf90_float, lat_var_id)
1900     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1901     iost    = nf90_put_att(ncid, lat_var_id, "long_name", 'latitude'//char(0))
1902     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1903     iost    = nf90_put_att(ncid, lat_var_id, "units", 'degrees North'//char(0))
1904     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1905     iost    = nf90_put_att(ncid, lat_var_id, "missing_value", REAL(-9999, kind=rk4))
1906     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1907 
1908     iost    = nf90_def_var(ncid, "lon", nf90_float, lon_var_id)
1909     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1910     iost    = nf90_put_att(ncid, lon_var_id, "long_name", 'longitude'//char(0))
1911     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1912     iost    = nf90_put_att(ncid, lon_var_id, "units", 'degrees East'//char(0))
1913     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1914     iost    = nf90_put_att(ncid, lon_var_id, "missing_value", REAL(-9999, kind=rk4))
1915     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1916 
1917     iost    = nf90_def_var(ncid, "phis", nf90_float, phis_var_id)
1918     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1919     iost    = nf90_put_att(ncid, phis_var_id, "long_name", 'surface geopotential height'//char(0))
1920     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1921     iost    = nf90_put_att(ncid, phis_var_id, "units", 'm^2/s^2'//char(0))
1922     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1923     iost    = nf90_put_att(ncid, phis_var_id, "missing_value", REAL(-9999, kind=rk4))
1924     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1925 
1926     iost    = nf90_def_var(ncid, "lev", nf90_double, (/ lev_dim_id /), lev_var_id)
1927     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1928     iost    = nf90_put_att(ncid, lev_var_id, "long_name", 'pressure levels'//char(0))
1929     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1930     iost    = nf90_put_att(ncid, lev_var_id, "units", 'hPa'//char(0))
1931     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1932     iost    = nf90_put_att(ncid, lev_var_id, "missing_value", REAL(-9999, kind=rk8))
1933     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1934 
1935     iost    = nf90_def_var(ncid, "T", nf90_float, (/ lev_dim_id, time_dim_id /), temp_var_id)
1936     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1937     iost    = nf90_put_att(ncid, temp_var_id, "long_name", 'Temperature'//char(0))
1938     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1939     iost    = nf90_put_att(ncid, temp_var_id, "units", 'K'//char(0))
1940     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1941     iost    = nf90_put_att(ncid, temp_var_id, "missing_value", REAL(-9999, kind=rk4))
1942     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1943 
1944     iost    = nf90_def_var(ncid, "q", nf90_float, (/ lev_dim_id, time_dim_id /), q_var_id)
1945     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1946     iost    = nf90_put_att(ncid, q_var_id, "long_name", 'Water vapour mixing ratio'//char(0))
1947     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1948     iost    = nf90_put_att(ncid, q_var_id, "units", 'g/kg'//char(0))
1949     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1950     iost    = nf90_put_att(ncid, q_var_id, "missing_value", REAL(-9999, kind=rk4))
1951     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1952 
1953     iost    = nf90_def_var(ncid, "u", nf90_float, (/ lev_dim_id, time_dim_id /), u_var_id)
1954     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1955     iost    = nf90_put_att(ncid, u_var_id, "long_name", 'Horizontal wind U component'//char(0))
1956     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1957     iost    = nf90_put_att(ncid, u_var_id, "units", 'm/s'//char(0))
1958     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1959     iost    = nf90_put_att(ncid, u_var_id, "missing_value", REAL(-9999, kind=rk4))
1960     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1961 
1962     iost    = nf90_def_var(ncid, "v", nf90_float, (/ lev_dim_id, time_dim_id /), v_var_id)
1963     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1964     iost    = nf90_put_att(ncid, v_var_id, "long_name", 'Horizontal wind V component'//char(0))
1965     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1966     iost    = nf90_put_att(ncid, v_var_id, "units", 'm/s'//char(0))
1967     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1968     iost    = nf90_put_att(ncid, v_var_id, "missing_value", REAL(-9999, kind=rk4))
1969     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1970 
1971     iost    = nf90_def_var(ncid, "omega", nf90_float, (/ lev_dim_id, time_dim_id /), omega_var_id)
1972     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1973     iost    = nf90_put_att(ncid, omega_var_id, "long_name", 'vertical velocity'//char(0))
1974     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1975     iost    = nf90_put_att(ncid, omega_var_id, "units", 'hPa/hour'//char(0))
1976     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1977     iost    = nf90_put_att(ncid, omega_var_id, "missing_value", REAL(-9999, kind=rk4))
1978     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1979 
1980     iost    = nf90_def_var(ncid, "div", nf90_float, (/ lev_dim_id, time_dim_id /), div_var_id)
1981     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1982     iost    = nf90_put_att(ncid, div_var_id, "long_name", 'Horizontal wind divergence'//char(0))
1983     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1984     iost    = nf90_put_att(ncid, div_var_id, "units", '1/s'//char(0))
1985     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1986     iost    = nf90_put_att(ncid, div_var_id, "missing_value", REAL(-9999, kind=rk4))
1987     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1988 
1989     iost    = nf90_def_var(ncid, "T_adv_h", nf90_float, (/ lev_dim_id, time_dim_id /), tadvh_var_id)
1990     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1991     iost    = nf90_put_att(ncid, tadvh_var_id, "long_name", 'Horizontal temperature Advection'//char(0))
1992     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1993     iost    = nf90_put_att(ncid, tadvh_var_id, "units", 'K/hour'//char(0))
1994     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1995     iost    = nf90_put_att(ncid, tadvh_var_id, "missing_value", REAL(-9999, kind=rk4))
1996     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
1997 
1998     iost    = nf90_def_var(ncid, "T_adv_v", nf90_float, (/ lev_dim_id, time_dim_id /), tadvv_var_id)
1999     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2000     iost    = nf90_put_att(ncid, tadvv_var_id, "long_name", 'Vertical temperature Advection'//char(0))
2001     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2002     iost    = nf90_put_att(ncid, tadvv_var_id, "units", 'K/hour'//char(0))
2003     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2004     iost    = nf90_put_att(ncid, tadvv_var_id, "missing_value", REAL(-9999, kind=rk4))
2005     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2006 
2007     iost    = nf90_def_var(ncid, "q_adv_h", nf90_float, (/ lev_dim_id, time_dim_id /), qadvh_var_id)
2008     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2009     iost    = nf90_put_att(ncid, qadvh_var_id, "long_name", 'Horizontal q advection'//char(0))
2010     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2011     iost    = nf90_put_att(ncid, qadvh_var_id, "units", 'g/kg/hour'//char(0))
2012     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2013     iost    = nf90_put_att(ncid, qadvh_var_id, "missing_value", REAL(-9999, kind=rk4))
2014     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2015 
2016     iost    = nf90_def_var(ncid, "q_adv_v", nf90_float, (/ lev_dim_id, time_dim_id /), qadvv_var_id)
2017     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2018     iost    = nf90_put_att(ncid, qadvv_var_id, "long_name", 'Vertical q advection'//char(0))
2019     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2020     iost    = nf90_put_att(ncid, qadvv_var_id, "units", 'g/kg/hour'//char(0))
2021     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2022     iost    = nf90_put_att(ncid, qadvv_var_id, "missing_value", REAL(-9999, kind=rk4))
2023     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2024 
2025     iost    = nf90_def_var(ncid, "s", nf90_float, (/ lev_dim_id, time_dim_id /), s_var_id)
2026     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2027     iost    = nf90_put_att(ncid, s_var_id, "long_name", 'Dry static energy'//char(0))
2028     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2029     iost    = nf90_put_att(ncid, s_var_id, "units", 'K'//char(0))
2030     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2031     iost    = nf90_put_att(ncid, s_var_id, "missing_value", REAL(-9999, kind=rk4))
2032     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2033 
2034     iost    = nf90_def_var(ncid, "s_adv_h", nf90_float, (/ lev_dim_id, time_dim_id /), sadvh_var_id)
2035     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2036     iost    = nf90_put_att(ncid, sadvh_var_id, "long_name", 'Horizontal dry static energy advection'//char(0))
2037     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2038     iost    = nf90_put_att(ncid, sadvh_var_id, "units", 'K/hour'//char(0))
2039     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2040     iost    = nf90_put_att(ncid, sadvh_var_id, "missing_value", REAL(-9999, kind=rk4))
2041     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2042 
2043     iost    = nf90_def_var(ncid, "s_adv_v", nf90_float, (/ lev_dim_id, time_dim_id /), sadvv_var_id)
2044     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2045     iost    = nf90_put_att(ncid, sadvv_var_id, "long_name", 'Vertical dry static energy advection'//char(0))
2046     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2047     iost    = nf90_put_att(ncid, sadvv_var_id, "units", 'K/hour'//char(0))
2048     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2049     iost    = nf90_put_att(ncid, sadvv_var_id, "missing_value", REAL(-9999, kind=rk4))
2050     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2051 
2052     iost    = nf90_def_var(ncid, "dsdt", nf90_float, (/ lev_dim_id, time_dim_id /), dsdt_var_id)
2053     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2054     iost    = nf90_put_att(ncid, dsdt_var_id, "long_name", 'd(dry static energy)/dt'//char(0))
2055     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2056     iost    = nf90_put_att(ncid, dsdt_var_id, "units", 'K/hour'//char(0))
2057     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2058     iost    = nf90_put_att(ncid, dsdt_var_id, "missing_value", REAL(-9999, kind=rk4))
2059     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2060 
2061     iost    = nf90_def_var(ncid, "dTdt", nf90_float, (/ lev_dim_id, time_dim_id /), dtdt_var_id)
2062     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2063     iost    = nf90_put_att(ncid, dtdt_var_id, "long_name", 'd(temperature)/dt'//char(0))
2064     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2065     iost    = nf90_put_att(ncid, dtdt_var_id, "units", 'K/hour'//char(0))
2066     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2067     iost    = nf90_put_att(ncid, dtdt_var_id, "missing_value", REAL(-9999, kind=rk4))
2068     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2069 
2070     iost    = nf90_def_var(ncid, "dqdt", nf90_float, (/ lev_dim_id, time_dim_id /), dqdt_var_id)
2071     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2072     iost    = nf90_put_att(ncid, dqdt_var_id, "long_name", 'd(water vapour mixing ratio)/dt'//char(0))
2073     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2074     iost    = nf90_put_att(ncid, dqdt_var_id, "units", 'g/kg/hour'//char(0))
2075     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2076     iost    = nf90_put_att(ncid, dqdt_var_id, "missing_value", REAL(-9999, kind=rk4))
2077     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2078 
2079     iost    = nf90_def_var(ncid, "q1", nf90_float, (/ lev_dim_id, time_dim_id /), q1_var_id)
2080     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2081     iost    = nf90_put_att(ncid, q1_var_id, "long_name", 'Apparent heat sources Yanai (1973)'//char(0))
2082     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2083     iost    = nf90_put_att(ncid, q1_var_id, "units", 'K/hour'//char(0))
2084     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2085     iost    = nf90_put_att(ncid, q1_var_id, "missing_value", REAL(-9999, kind=rk4))
2086     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2087 
2088     iost    = nf90_def_var(ncid, "q2", nf90_float, (/ lev_dim_id, time_dim_id /), q2_var_id)
2089     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2090     iost    = nf90_put_att(ncid, q2_var_id, "long_name", 'Apparent moisture sinks Yanai (1973)'//char(0))
2091     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2092     iost    = nf90_put_att(ncid, q2_var_id, "units", 'K/hour'//char(0))
2093     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2094     iost    = nf90_put_att(ncid, q2_var_id, "missing_value", REAL(-9999, kind=rk4))
2095     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2096 
2097     iost    = nf90_def_var(ncid, "cld", nf90_float, (/ lev_dim_id, time_dim_id /), cld_var_id)
2098     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2099     iost    = nf90_put_att(ncid, cld_var_id, "long_name", 'Cloud fraction'//char(0))
2100     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2101     iost    = nf90_put_att(ncid, cld_var_id, "units", '%'//char(0))
2102     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2103     iost    = nf90_put_att(ncid, cld_var_id, "missing_value", REAL(-9999, kind=rk4))
2104     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2105 
2106     iost    = nf90_def_var(ncid, "prec_srf", nf90_float, (/ time_dim_id /), prec_var_id)
2107     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2108     iost    = nf90_put_att(ncid, prec_var_id, "long_name", 'Surface precipitation'//char(0))
2109     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2110     iost    = nf90_put_att(ncid, prec_var_id, "units", 'mm/hour'//char(0))
2111     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2112     iost    = nf90_put_att(ncid, prec_var_id, "missing_value", REAL(-9999, kind=rk4))
2113     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2114 
2115     iost    = nf90_def_var(ncid, "LH", nf90_float, (/ time_dim_id /), lh_var_id)
2116     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2117     iost    = nf90_put_att(ncid, lh_var_id, "long_name", 'Surface latent heat flux, upward positive'//char(0))
2118     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2119     iost    = nf90_put_att(ncid, lh_var_id, "units", 'W/m^2'//char(0))
2120     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2121     iost    = nf90_put_att(ncid, lh_var_id, "missing_value", REAL(-9999, kind=rk4))
2122     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2123 
2124     iost    = nf90_def_var(ncid, "SH", nf90_float, (/ time_dim_id /), sh_var_id)
2125     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2126     iost    = nf90_put_att(ncid, sh_var_id, "long_name", 'Surface sensible heat flux, upward positive'//char(0))
2127     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2128     iost    = nf90_put_att(ncid, sh_var_id, "units", 'W/m^2'//char(0))
2129     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2130     iost    = nf90_put_att(ncid, sh_var_id, "missing_value", REAL(-9999, kind=rk4))
2131     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2132 
2133     iost    = nf90_def_var(ncid, "p_srf_aver", nf90_float, (/ time_dim_id /), psa_var_id)
2134     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2135     iost    = nf90_put_att(ncid, psa_var_id, "long_name", 'Surface pressure averaged over the domain'//char(0))
2136     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2137     iost    = nf90_put_att(ncid, psa_var_id, "units", 'hPa'//char(0))
2138     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2139     iost    = nf90_put_att(ncid, psa_var_id, "missing_value", REAL(-9999, kind=rk4))
2140     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2141 
2142     iost    = nf90_def_var(ncid, "p_srf_center", nf90_float, (/ time_dim_id /), psi_var_id)
2143     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2144     iost    = nf90_put_att(ncid, psi_var_id, "long_name", 'Surface pressure at centre of the domain'//char(0))
2145     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2146     iost    = nf90_put_att(ncid, psi_var_id, "units", 'hPa'//char(0))
2147     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2148     iost    = nf90_put_att(ncid, psi_var_id, "missing_value", REAL(-9999, kind=rk4))
2149     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2150 
2151     iost    = nf90_def_var(ncid, "T_srf", nf90_float, (/ time_dim_id /), tsair_var_id)
2152     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2153     iost    = nf90_put_att(ncid, tsair_var_id, "long_name", '2m air temperature'//char(0))
2154     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2155     iost    = nf90_put_att(ncid, tsair_var_id, "units", 'Celsius'//char(0))
2156     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2157     iost    = nf90_put_att(ncid, tsair_var_id, "missing_value", REAL(-9999, kind=rk4))
2158     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2159 
2160     iost    = nf90_def_var(ncid, "T_skin", nf90_float, (/ time_dim_id /), tskin_var_id)
2161     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2162     iost    = nf90_put_att(ncid, tskin_var_id, "long_name", 'Surface skin temperature'//char(0))
2163     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2164     iost    = nf90_put_att(ncid, tskin_var_id, "units", 'Celsius'//char(0))
2165     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2166     iost    = nf90_put_att(ncid, tskin_var_id, "missing_value", REAL(-9999, kind=rk4))
2167     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2168 
2169     iost    = nf90_def_var(ncid, "RH_srf", nf90_float, (/ time_dim_id /), rhair_var_id)
2170     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2171     iost    = nf90_put_att(ncid, rhair_var_id, "long_name", '2m air relative humidity'//char(0))
2172     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2173     iost    = nf90_put_att(ncid, rhair_var_id, "units", '%'//char(0))
2174     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2175     iost    = nf90_put_att(ncid, rhair_var_id, "missing_value", REAL(-9999, kind=rk4))
2176     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2177 
2178     iost    = nf90_def_var(ncid, "wspd_srf", nf90_float, (/ time_dim_id /), wspd_var_id)
2179     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2180     iost    = nf90_put_att(ncid, wspd_var_id, "long_name", '10m wind speed'//char(0))
2181     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2182     iost    = nf90_put_att(ncid, wspd_var_id, "units", 'm/s'//char(0))
2183     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2184     iost    = nf90_put_att(ncid, wspd_var_id, "missing_value", REAL(-9999, kind=rk4))
2185     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2186 
2187     iost    = nf90_def_var(ncid, "u_srf", nf90_float, (/ time_dim_id /), us_var_id)
2188     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2189     iost    = nf90_put_att(ncid, us_var_id, "long_name", '10m U component'//char(0))
2190     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2191     iost    = nf90_put_att(ncid, us_var_id, "units", 'm/s'//char(0))
2192     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2193     iost    = nf90_put_att(ncid, us_var_id, "missing_value", REAL(-9999, kind=rk4))
2194     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2195 
2196     iost    = nf90_def_var(ncid, "v_srf", nf90_float, (/ time_dim_id /), vs_var_id)
2197     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2198     iost    = nf90_put_att(ncid, vs_var_id, "long_name", '10m V component'//char(0))
2199     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2200     iost    = nf90_put_att(ncid, vs_var_id, "units", 'm/s'//char(0))
2201     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2202     iost    = nf90_put_att(ncid, vs_var_id, "missing_value", REAL(-9999, kind=rk4))
2203     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2204 
2205     iost    = nf90_def_var(ncid, "rad_net_srf", nf90_float, (/ time_dim_id /), srfrad_var_id)
2206     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2207     iost    = nf90_put_att(ncid, srfrad_var_id, "long_name", 'Surface net radiation, downward positive'//char(0))
2208     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2209     iost    = nf90_put_att(ncid, srfrad_var_id, "units", 'W/m^2'//char(0))
2210     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2211     iost    = nf90_put_att(ncid, srfrad_var_id, "missing_value", REAL(-9999, kind=rk4))
2212     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2213 
2214     iost    = nf90_def_var(ncid, "lw_net_toa", nf90_float, (/ time_dim_id /), flut_var_id)
2215     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2216     iost    = nf90_put_att(ncid, flut_var_id, "long_name", 'TOA LW flux, upward positive'//char(0))
2217     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2218     iost    = nf90_put_att(ncid, flut_var_id, "units", 'W/m^2'//char(0))
2219     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2220     iost    = nf90_put_att(ncid, flut_var_id, "missing_value", REAL(-9999, kind=rk4))
2221     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2222 
2223     iost    = nf90_def_var(ncid, "sw_net_toa", nf90_float, (/ time_dim_id /), fsnt_var_id)
2224     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2225     iost    = nf90_put_att(ncid, fsnt_var_id, "long_name", 'TOA net SW flux, downward positive'//char(0))
2226     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2227     iost    = nf90_put_att(ncid, fsnt_var_id, "units", 'W/m^2'//char(0))
2228     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2229     iost    = nf90_put_att(ncid, fsnt_var_id, "missing_value", REAL(-9999, kind=rk4))
2230     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2231 
2232     iost    = nf90_def_var(ncid, "sw_dn_toa", nf90_float, (/ time_dim_id /), solin_var_id)
2233     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2234     iost    = nf90_put_att(ncid, solin_var_id, "long_name", 'TOA solar insolation'//char(0))
2235     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2236     iost    = nf90_put_att(ncid, solin_var_id, "units", 'W/m^2'//char(0))
2237     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2238     iost    = nf90_put_att(ncid, solin_var_id, "missing_value", REAL(-9999, kind=rk4))
2239     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2240 
2241     iost    = nf90_def_var(ncid, "cld_low", nf90_float, (/ time_dim_id /), cldlow_var_id)
2242     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2243     iost    = nf90_put_att(ncid, cldlow_var_id, "long_name", 'Satellite-measured low cloud'//char(0))
2244     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2245     iost    = nf90_put_att(ncid, cldlow_var_id, "units", '%'//char(0))
2246     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2247     iost    = nf90_put_att(ncid, cldlow_var_id, "missing_value", REAL(-9999, kind=rk4))
2248     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2249 
2250     iost    = nf90_def_var(ncid, "cld_mid", nf90_float, (/ time_dim_id /), cldmed_var_id)
2251     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2252     iost    = nf90_put_att(ncid, cldmed_var_id, "long_name", 'Satellite-measured middle cloud'//char(0))
2253     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2254     iost    = nf90_put_att(ncid, cldmed_var_id, "units", '%'//char(0))
2255     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2256     iost    = nf90_put_att(ncid, cldmed_var_id, "missing_value", REAL(-9999, kind=rk4))
2257     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2258 
2259     iost    = nf90_def_var(ncid, "cld_high", nf90_float, (/ time_dim_id /), cldhgh_var_id)
2260     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2261     iost    = nf90_put_att(ncid, cldhgh_var_id, "long_name", 'Satellite-measured high cloud'//char(0))
2262     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2263     iost    = nf90_put_att(ncid, cldhgh_var_id, "units", '%'//char(0))
2264     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2265     iost    = nf90_put_att(ncid, cldhgh_var_id, "missing_value", REAL(-9999, kind=rk4))
2266     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2267 
2268     iost    = nf90_def_var(ncid, "cld_tot", nf90_float, (/ time_dim_id /), cldtot_var_id)
2269     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2270     iost    = nf90_put_att(ncid, cldtot_var_id, "long_name", 'Satellite-measured total cloud'//char(0))
2271     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2272     iost    = nf90_put_att(ncid, cldtot_var_id, "units", '%'//char(0))
2273     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2274     iost    = nf90_put_att(ncid, cldtot_var_id, "missing_value", REAL(-9999, kind=rk4))
2275     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2276 
2277     iost    = nf90_def_var(ncid, "cld_thick", nf90_float, (/ time_dim_id /), cldthk_var_id)
2278     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2279     iost    = nf90_put_att(ncid, cldthk_var_id, "long_name", 'Satellite-measured cloud thickness'//char(0))
2280     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2281     iost    = nf90_put_att(ncid, cldthk_var_id, "units", 'km'//char(0))
2282     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2283     iost    = nf90_put_att(ncid, cldthk_var_id, "missing_value", REAL(-9999, kind=rk4))
2284     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2285 
2286     iost    = nf90_def_var(ncid, "cld_top", nf90_float, (/ time_dim_id /), cldtop_var_id)
2287     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2288     iost    = nf90_put_att(ncid, cldtop_var_id, "long_name", 'Satellite-measured cloud top'//char(0))
2289     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2290     iost    = nf90_put_att(ncid, cldtop_var_id, "units", 'km'//char(0))
2291     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2292     iost    = nf90_put_att(ncid, cldtop_var_id, "missing_value", REAL(-9999, kind=rk4))
2293     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2294 
2295     iost    = nf90_def_var(ncid, "LWP", nf90_float, (/ time_dim_id /), lwp_var_id)
2296     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2297     iost    = nf90_put_att(ncid, lwp_var_id, "long_name", 'MWR-measured cloud liquid water path'//char(0))
2298     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2299     iost    = nf90_put_att(ncid, lwp_var_id, "units", 'cm'//char(0))
2300     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2301     iost    = nf90_put_att(ncid, lwp_var_id, "missing_value", REAL(-9999, kind=rk4))
2302     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2303 
2304     iost    = nf90_def_var(ncid, "dh2odt_col", nf90_float, (/ time_dim_id /), cdh2odt_var_id)
2305     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2306     iost    = nf90_put_att(ncid, cdh2odt_var_id, "long_name", 'Column-integrated dH2O/dt'//char(0))
2307     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2308     iost    = nf90_put_att(ncid, cdh2odt_var_id, "units", 'mm/hour'//char(0))
2309     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2310     iost    = nf90_put_att(ncid, cdh2odt_var_id, "missing_value", REAL(-9999, kind=rk4))
2311     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2312 
2313     iost    = nf90_def_var(ncid, "h2o_adv_col", nf90_float, (/ time_dim_id /), ch2oadv_var_id)
2314     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2315     iost    = nf90_put_att(ncid, ch2oadv_var_id, "long_name", 'Column-integrated H2O advection'//char(0))
2316     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2317     iost    = nf90_put_att(ncid, ch2oadv_var_id, "units", 'mm/hour'//char(0))
2318     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2319     iost    = nf90_put_att(ncid, ch2oadv_var_id, "missing_value", REAL(-9999, kind=rk4))
2320     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2321 
2322     iost    = nf90_def_var(ncid, "evap_srf", nf90_float, (/ time_dim_id /), evap_var_id)
2323     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2324     iost    = nf90_put_att(ncid, evap_var_id, "long_name", 'Surface evaporation'//char(0))
2325     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2326     iost    = nf90_put_att(ncid, evap_var_id, "units", 'mm/hour'//char(0))
2327     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2328     iost    = nf90_put_att(ncid, evap_var_id, "missing_value", REAL(-9999, kind=rk4))
2329     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2330 
2331     iost    = nf90_def_var(ncid, "dsdt_col", nf90_float, (/ time_dim_id /), cdsdt_var_id)
2332     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2333     iost    = nf90_put_att(ncid, cdsdt_var_id, "long_name", 'Column d(dry static energy)/dt'//char(0))
2334     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2335     iost    = nf90_put_att(ncid, cdsdt_var_id, "units", 'W/m^2'//char(0))
2336     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2337     iost    = nf90_put_att(ncid, cdsdt_var_id, "missing_value", REAL(-9999, kind=rk4))
2338     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2339 
2340     iost    = nf90_def_var(ncid, "s_adv_col", nf90_float, (/ time_dim_id /), csadv_var_id)
2341     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2342     iost    = nf90_put_att(ncid, csadv_var_id, "long_name", 'Column dry static energy advection'//char(0))
2343     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2344     iost    = nf90_put_att(ncid, csadv_var_id, "units", 'W/m^2'//char(0))
2345     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2346     iost    = nf90_put_att(ncid, csadv_var_id, "missing_value", REAL(-9999, kind=rk4))
2347     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2348 
2349     iost    = nf90_def_var(ncid, "rad_heat_col", nf90_float, (/ time_dim_id /), crad_var_id)
2350     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2351     iost    = nf90_put_att(ncid, crad_var_id, "long_name", 'Column radiative heating'//char(0))
2352     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2353     iost    = nf90_put_att(ncid, crad_var_id, "units", 'W/m^2'//char(0))
2354     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2355     iost    = nf90_put_att(ncid, crad_var_id, "missing_value", REAL(-9999, kind=rk4))
2356     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2357 
2358     iost    = nf90_def_var(ncid, "LH_col", nf90_float, (/ time_dim_id /), clh_var_id)
2359     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2360     iost    = nf90_put_att(ncid, clh_var_id, "long_name", 'Column latent heating'//char(0))
2361     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2362     iost    = nf90_put_att(ncid, clh_var_id, "units", 'W/m^2'//char(0))
2363     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2364     iost    = nf90_put_att(ncid, clh_var_id, "missing_value", REAL(-9999, kind=rk4))
2365     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2366 
2367     iost    = nf90_def_var(ncid, "omega_srf", nf90_float, (/ time_dim_id /), omegas_var_id)
2368     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2369     iost    = nf90_put_att(ncid, omegas_var_id, "long_name", 'Surface omega'//char(0))
2370     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2371     iost    = nf90_put_att(ncid, omegas_var_id, "units", 'hPa/hour'//char(0))
2372     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2373     iost    = nf90_put_att(ncid, omegas_var_id, "missing_value", REAL(-9999, kind=rk4))
2374     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2375 
2376     iost    = nf90_def_var(ncid, "q_srf", nf90_float, (/ time_dim_id /), qs_var_id)
2377     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2378     iost    = nf90_put_att(ncid, qs_var_id, "long_name", '2m water vapour mixing ratio'//char(0))
2379     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2380     iost    = nf90_put_att(ncid, qs_var_id, "units", 'kg/kg'//char(0))
2381     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2382     iost    = nf90_put_att(ncid, qs_var_id, "missing_value", REAL(-9999, kind=rk4))
2383     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2384 
2385     iost    = nf90_def_var(ncid, "s_srf", nf90_float, (/ time_dim_id /), s2m_var_id)
2386     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2387     iost    = nf90_put_att(ncid, s2m_var_id, "long_name", '2m dry static energy'//char(0))
2388     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2389     iost    = nf90_put_att(ncid, s2m_var_id, "units", 'K'//char(0))
2390     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2391     iost    = nf90_put_att(ncid, s2m_var_id, "missing_value", REAL(-9999, kind=rk4))
2392     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2393 
2394     iost    = nf90_def_var(ncid, "PW", nf90_float, (/ time_dim_id /), pw_var_id)
2395     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2396     iost    = nf90_put_att(ncid, pw_var_id, "long_name", 'MWR-measured column precipitable water'//char(0))
2397     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2398     iost    = nf90_put_att(ncid, pw_var_id, "units", 'cm'//char(0))
2399     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2400     iost    = nf90_put_att(ncid, pw_var_id, "missing_value", REAL(-9999, kind=rk4))
2401     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2402 
2403     iost    = nf90_def_var(ncid, "lw_up_srf", nf90_float, (/ time_dim_id /), flus_var_id)
2404     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2405     iost    = nf90_put_att(ncid, flus_var_id, "long_name", 'Surface upwelling LW'//char(0))
2406     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2407     iost    = nf90_put_att(ncid, flus_var_id, "units", 'W/m^2'//char(0))
2408     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2409     iost    = nf90_put_att(ncid, flus_var_id, "missing_value", REAL(-9999, kind=rk4))
2410     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2411 
2412     iost    = nf90_def_var(ncid, "lw_dn_srf", nf90_float, (/ time_dim_id /), flds_var_id)
2413     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2414     iost    = nf90_put_att(ncid, flds_var_id, "long_name", 'Surface downwelling LW'//char(0))
2415     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2416     iost    = nf90_put_att(ncid, flds_var_id, "units", 'W/m^2'//char(0))
2417     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2418     iost    = nf90_put_att(ncid, flds_var_id, "missing_value", REAL(-9999, kind=rk4))
2419     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2420 
2421     iost    = nf90_def_var(ncid, "sw_up_srf", nf90_float, (/ time_dim_id /), fsus_var_id)
2422     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2423     iost    = nf90_put_att(ncid, fsus_var_id, "long_name", 'Surface downwelling SW'//char(0))
2424     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2425     iost    = nf90_put_att(ncid, fsus_var_id, "units", 'W/m^2'//char(0))
2426     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2427     iost    = nf90_put_att(ncid, fsus_var_id, "missing_value", REAL(-9999, kind=rk4))
2428     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2429 
2430     iost    = nf90_def_var(ncid, "sw_dn_srf", nf90_float, (/ time_dim_id /), fsds_var_id)
2431     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2432     iost    = nf90_put_att(ncid, fsds_var_id, "long_name", 'Surface downwelling SW'//char(0))
2433     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2434     iost    = nf90_put_att(ncid, fsds_var_id, "units", 'W/m^2'//char(0))
2435     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2436     iost    = nf90_put_att(ncid, fsds_var_id, "missing_value", REAL(-9999, kind=rk4))
2437     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2438 
2439     !
2440     ! Define the global attributes\&. The TWP-ICE stuff shouldn't be hard coded\&.
2441     !
2442     iost    = nf90_put_att(ncid, nf90_global, "Conventions", 'CF-1\&.0'//char(0))
2443     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2444     iost    = nf90_put_att(ncid, nf90_global, "title", 'VarAnalysis 3hr SndgBased Products V1\&.1: TWP-ICE'//char(0))
2445     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2446     CALL date_and_time(values=date_time)
2447     WRITE(unit=tmpstr, fmt='(I4\&.4,"-",I2\&.2,"-",I2\&.2,"T",I2\&.2,":",I2\&.2,":",I2\&.2,"\&.",I3\&.3,SP,I5)') &
2448         & date_time(1), date_time(2), date_time(3), date_time(5), date_time(6), date_time(7), date_time(8), date_time(4)
2449     iost    = nf90_put_att(ncid, nf90_global, "date_created", tmpstr//char(0))
2450     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2451     iost    = nf90_put_att(ncid, nf90_global, "software", 'Fortran 95 variational analysis software'//char(0))
2452     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2453 
2454     !
2455     ! We've finished defining stuff, leave the definition mode\&.
2456     !
2457     iost    = nf90_enddef(ncid)
2458     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2459 
2460     !
2461     ! Write the data\&.
2462     !
2463     iost    = nf90_put_var(ncid, base_time_var_id, REAL(DATE_TIME_TO_UNIX(YYYY=INT(SFC_DATA(2,1), KIND=IK4), &
        & MO=INT(SFC_DATA(3,1), KIND=IK4), DD=INT(SFC_DATA(4,1), KIND=IK4), HH=INT(SFC_DATA(5,1), KIND=IK4), &
2464         & MM=INT(SFC_DATA(6,1), KIND=IK4))-SFC_DATA(1,1)*86400, KIND=RK8))
2465     if (iost \&.NE\&. nf90_noerr) go to 9999
2466 
2467     iost    = nf90_put_var(ncid,    time_var_id,        sfc_data(1,:))
2468     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2469     iost    = nf90_put_var(ncid,    time_offset_var_id, (sfc_data(1,:) - sfc_data(1,1))*86400\&.)
2470     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2471     iost    = nf90_put_var(ncid,    year_var_id,        sfc_data(2,:))
2472     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2473     iost    = nf90_put_var(ncid,    month_var_id,       sfc_data(3,:))
2474     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2475     iost    = nf90_put_var(ncid,    day_var_id,         sfc_data(4,:))
2476     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2477     iost    = nf90_put_var(ncid,    hour_var_id,        sfc_data(5,:))
2478     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2479     iost    = nf90_put_var(ncid,    minute_var_id,      sfc_data(6,:))
2480     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2481     iost    = nf90_put_var(ncid,    lat_var_id,         cf_lat)
2482     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2483     iost    = nf90_put_var(ncid,    lon_var_id,         cf_lon)
2484     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2485     iost    = nf90_put_var(ncid,    phis_var_id,        cf_phis)
2486     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2487     iost    = nf90_put_var(ncid,    lev_var_id,         plevs)
2488     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2489 
2490     iost    = nf90_put_var(ncid,    temp_var_id,        ml_data(1,:,:)) 
2491     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2492     iost    = nf90_put_var(ncid,    q_var_id,           ml_data(2,:,:))
2493     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2494     iost    = nf90_put_var(ncid,    u_var_id,           ml_data(3,:,:))
2495     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2496     iost    = nf90_put_var(ncid,    v_var_id,           ml_data(4,:,:))
2497     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2498     iost    = nf90_put_var(ncid,    omega_var_id,       ml_data(5,:,:))
2499     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2500     iost    = nf90_put_var(ncid,    div_var_id,         ml_data(6,:,:))
2501     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2502     iost    = nf90_put_var(ncid,    tadvh_var_id,       ml_data(7,:,:))
2503     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2504     iost    = nf90_put_var(ncid,    tadvv_var_id,       ml_data(8,:,:))
2505     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2506     iost    = nf90_put_var(ncid,    qadvh_var_id,       ml_data(9,:,:))
2507     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2508     iost    = nf90_put_var(ncid,    qadvv_var_id,       ml_data(10,:,:))
2509     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2510     iost    = nf90_put_var(ncid,    s_var_id,           ml_data(11,:,:))
2511     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2512     iost    = nf90_put_var(ncid,    sadvh_var_id,       ml_data(12,:,:))
2513     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2514     iost    = nf90_put_var(ncid,    sadvv_var_id,       ml_data(13,:,:))
2515     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2516     iost    = nf90_put_var(ncid,    dsdt_var_id,        ml_data(14,:,:))
2517     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2518     iost    = nf90_put_var(ncid,    dtdt_var_id,        ml_data(15,:,:))
2519     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2520     iost    = nf90_put_var(ncid,    dqdt_var_id,        ml_data(16,:,:))
2521     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2522     iost    = nf90_put_var(ncid,    q1_var_id,          ml_data(17,:,:))
2523     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2524     iost    = nf90_put_var(ncid,    q2_var_id,          ml_data(18,:,:))
2525     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2526 
2527     iost    = nf90_put_var(ncid,    prec_var_id,        sfc_data(7,:))
2528     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2529     iost    = nf90_put_var(ncid,    lh_var_id,          sfc_data(8,:))
2530     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2531     iost    = nf90_put_var(ncid,    sh_var_id,          sfc_data(9,:))
2532     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2533     iost    = nf90_put_var(ncid,    psa_var_id,         sfc_data(10,:))
2534     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2535     iost    = nf90_put_var(ncid,    psi_var_id,         sfc_data(11,:))
2536     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2537     iost    = nf90_put_var(ncid,    tsair_var_id,       sfc_data(12,:))
2538     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2539     iost    = nf90_put_var(ncid,    tskin_var_id,       sfc_data(13,:))
2540     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2541     iost    = nf90_put_var(ncid,    rhair_var_id,       sfc_data(14,:))
2542     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2543     iost    = nf90_put_var(ncid,    wspd_var_id,        sfc_data(15,:))
2544     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2545     iost    = nf90_put_var(ncid,    us_var_id,          sfc_data(16,:))
2546     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2547     iost    = nf90_put_var(ncid,    vs_var_id,          sfc_data(17,:))
2548     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2549     iost    = nf90_put_var(ncid,    srfrad_var_id,      sfc_data(18,:))
2550     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2551     iost    = nf90_put_var(ncid,    flut_var_id,        sfc_data(19,:))
2552     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2553     iost    = nf90_put_var(ncid,    fsnt_var_id,        sfc_data(20,:))
2554     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2555     !IOST    = NF90_PUT_VAR(NCID,    SOLIN_VAR_ID,       SFC_DATA(21,:))
2556     !IF (IOST \&.NE\&. NF90_NOERR) GO TO 9999
2557     iost    = nf90_put_var(ncid,    cldlow_var_id,      sfc_data(22,:))
2558     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2559     iost    = nf90_put_var(ncid,    cldmed_var_id,      sfc_data(23,:))
2560     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2561     iost    = nf90_put_var(ncid,    cldhgh_var_id,      sfc_data(24,:))
2562     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2563     iost    = nf90_put_var(ncid,    cldtot_var_id,      sfc_data(25,:))
2564     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2565     iost    = nf90_put_var(ncid,    cldthk_var_id,      sfc_data(26,:))
2566     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2567     iost    = nf90_put_var(ncid,    cldtop_var_id,      sfc_data(27,:))
2568     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2569     iost    = nf90_put_var(ncid,    lwp_var_id,         sfc_data(28,:))
2570     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2571     iost    = nf90_put_var(ncid,    cdh2odt_var_id,     sfc_data(29,:))
2572     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2573     iost    = nf90_put_var(ncid,    ch2oadv_var_id,     sfc_data(30,:))
2574     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2575     iost    = nf90_put_var(ncid,    evap_var_id,        sfc_data(31,:))
2576     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2577     iost    = nf90_put_var(ncid,    cdsdt_var_id,       sfc_data(32,:))
2578     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2579     iost    = nf90_put_var(ncid,    csadv_var_id,       sfc_data(33,:))
2580     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2581     iost    = nf90_put_var(ncid,    crad_var_id,        sfc_data(34,:))
2582     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2583     iost    = nf90_put_var(ncid,    clh_var_id,         sfc_data(35,:))
2584     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2585     iost    = nf90_put_var(ncid,    omegas_var_id,      sfc_data(36,:))
2586     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2587     iost    = nf90_put_var(ncid,    qs_var_id,          sfc_data(37,:))
2588     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2589     iost    = nf90_put_var(ncid,    s2m_var_id,         sfc_data(38,:))
2590     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2591     iost    = nf90_put_var(ncid,    pw_var_id,          sfc_data(39,:))
2592     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2593     iost    = nf90_put_var(ncid,    flus_var_id,        sfc_data(40,:))
2594     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2595     iost    = nf90_put_var(ncid,    flds_var_id,        sfc_data(41,:))
2596     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2597     iost    = nf90_put_var(ncid,    fsus_var_id,        sfc_data(42,:))
2598     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2599     iost    = nf90_put_var(ncid,    fsds_var_id,        sfc_data(43,:))
2600     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2601 
2602     !
2603     ! Close the NetCDF file\&.
2604     !
2605     iost    = nf90_close(ncid)
2606     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
2607 
2608     !
2609     ! Catch any NetCDF errors here\&.
2610     !
2611     9999 CONTINUE
2612     IF (iost \&.NE\&. nf90_noerr) THEN
2613         print *,'E: Problem creating NetCDF file ',outputfile
2614         print *, trim(nf90_strerror(iost))
2615         stop '1'
2616     END IF
2617 
2618 .fi
.SS "subroutine io::opt_vht_netcdf (character (len=*), intent(in) OUTPUTFILE, character (len=*), intent(in) INSTRUMENT, integer (kind=ik4), intent(in) NV, integer (kind=ik4), intent(in) NP, integer (kind=ik4), intent(in) NST, integer (kind=ik4), intent(in) NT, character (len=*), dimension(nv), intent(in) V, real (kind=rk8), dimension(np), intent(in) P, character (len=*), dimension(nst), intent(in) ST, real (kind=rk8), dimension(nt), intent(in) T, real (kind=rk8), dimension(nv,np,nst,nt), intent(in) D)"

.PP
Definition at line 265 of file io\&.f90\&.
.PP
.nf
265     USE portable
266     USE netcdf
267 
268     IMPLICIT NONE
269 
270     CHARACTER (LEN=*), INTENT(IN)                                       :: outputfile   ! Name of the output file\&.
271     CHARACTER (LEN=*), INTENT(IN)                                       :: instrument   ! Instrument name\&.
272     INTEGER (KIND=IK4), INTENT(IN)                                      :: nv           ! Number of variables?
273     INTEGER (KIND=IK4), INTENT(IN)                                      :: np           ! Number of pressure levels\&.
274     INTEGER (KIND=IK4), INTENT(IN)                                      :: nst          ! Number of stations\&.
275     INTEGER (KIND=IK4), INTENT(IN)                                      :: nt           ! Number of time steps\&.
276     CHARACTER (LEN=*), DIMENSION(NV),  INTENT(IN)                       :: v            ! Variable names?
277     REAL (KIND=RK8), DIMENSION(NP), INTENT(IN)                          :: p            ! Values of the pressure levels\&.
278     CHARACTER (LEN=*), DIMENSION(NST), INTENT(IN)                       :: st           ! Station names?
279     REAL (KIND=RK8), DIMENSION(NT), INTENT(IN)                          :: t            ! Time values?
280     REAL (KIND=RK8), DIMENSION(NV,NP,NST,NT), INTENT(IN)                :: d            ! The data\&.
281 
282     !
283     ! Local variables\&.
284     !
285     INTEGER (KIND=IK4)          :: ncid                                                 ! ID of NetCDF file\&.
286     INTEGER (KIND=IK4)          :: v_dim_id, p_dim_id, st_dim_id, t_dim_id, str_dim_id  ! Dimension IDs\&.
287     INTEGER (KIND=IK4)          :: v_var_id, p_var_id, st_var_id, t_var_id, data_var_id ! Variable IDs\&.
288     INTEGER (KIND=IK4)          :: iost                                                 ! I/O status\&.
289     INTEGER (KIND=IK4)          :: ii                                                   ! Counter\&.
290     INTEGER (KIND=IK4)          :: strlen                                               ! String length\&.
291     CHARACTER (LEN=64)          :: tmpstr                                               ! Temporary string\&.
292 
293     iost    = nf90_noerr
294     !
295     ! Create the NetCDF file\&.
296     !
297     iost    = nf90_create(outputfile, nf90_noclobber, ncid)
298     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
299 
300     !
301     ! Define the dimensions\&.
302     !
303     iost    = nf90_def_dim(ncid, "variables", nv, v_dim_id)     ! The data array contains many variables\&.
304     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
305 
306     iost    = nf90_def_dim(ncid, "levels", np, p_dim_id)        ! Vertical levels\&.
307     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
308 
309     iost    = nf90_def_dim(ncid, "stations", nst, st_dim_id)    ! Stations\&.
310     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
311 
312     iost    = nf90_def_dim(ncid, "time", nt, t_dim_id)          ! Time steps\&.
313     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
314 
315     iost    = nf90_def_dim(ncid, "string", 64, str_dim_id)      ! This dimension is used for character strings\&.
316     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
317 
318     !
319     ! Define the variables\&.
320     !
321     iost    = nf90_def_var(ncid, "variables", nf90_char, (/ str_dim_id, v_dim_id /), v_var_id)
322     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
323 
324     iost    = nf90_def_var(ncid, "levels", nf90_double, (/ p_dim_id /), p_var_id)
325     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
326 
327     iost    = nf90_def_var(ncid, "stations", nf90_char, (/ str_dim_id, st_dim_id /), st_var_id)
328     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
329 
330     iost    = nf90_def_var(ncid, "time", nf90_double, (/ t_dim_id /), t_var_id)
331     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
332 
333     iost    = nf90_def_var(ncid, "data", nf90_double, (/ v_dim_id, p_dim_id, st_dim_id, t_dim_id /), data_var_id)
334     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
335 
336     !
337     ! Write the instrument type as a global attribute\&. Make sure the string is null terminated (for C programs)\&.
338     !
339     iost    = nf90_put_att(ncid, nf90_global, "instrument", trim(instrument)//char(0))
340     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
341 
342     !
343     ! We've finished defining stuff, leave the definition mode\&.
344     !
345     iost    = nf90_enddef(ncid)
346     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
347 
348     !
349     ! Write the names of the variables\&. Terminate strings with a null byte, in case the data are subsequently read by a C program\&.
350     !
351     DO ii=1,nv
352         tmpstr  = trim(v(ii))
353         strlen  = min(63, len_trim(tmpstr))           ! The characters after this positon will be replaced by null characters\&.
354         tmpstr(strlen+1:64)    = repeat(char(0), 64-strlen)
355         iost    = nf90_put_var(ncid, v_var_id, tmpstr, (/ 1, ii /), (/ 64, 1 /))
356         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
357     END DO
358 
359     !
360     ! Write the names of the stations\&. Terminate strings with a null byte, in case the data are subsequently read by a C program\&.
361     !
362     DO ii=1,nst
363         tmpstr  = trim(st(ii))
364         strlen  = min(63, len_trim(tmpstr))           ! The characters after this positon will be replaced by null characters\&.
365         tmpstr(strlen+1:64)    = repeat(char(0) , 64-strlen)
366         iost    = nf90_put_var(ncid, st_var_id, tmpstr, (/ 1, ii /), (/ 64, 1 /))
367         IF (iost \&.NE\&. nf90_noerr) GO TO 9999
368     END DO
369 
370     !
371     ! Write the pressure levels\&.
372     !
373     iost    = nf90_put_var(ncid, p_var_id, p)
374     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
375 
376     !
377     ! Write the time steps\&.
378     !
379     iost    = nf90_put_var(ncid, t_var_id, t)
380     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
381 
382     !
383     ! Write the big data array\&.
384     !
385     iost    = nf90_put_var(ncid, data_var_id, d)
386     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
387 
388     !
389     ! Close the NetCDF file\&.
390     !
391     iost    = nf90_close(ncid)
392     IF (iost \&.NE\&. nf90_noerr) GO TO 9999
393 
394     !
395     ! Catch any NetCDF errors here\&.
396     !
397     9999 IF (iost \&.NE\&. nf90_noerr) THEN
398         print *,'E: Problem creating NetCDF file ',outputfile
399         print *, trim(nf90_strerror(iost))
400         stop '1'
401     END IF
402 
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Variational Analysis from the source code\&.
