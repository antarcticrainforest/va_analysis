#!/bin/bash

##################################################################################
# Makes $tavg hr time avg radar rainfall files
#
#  syntax:
#
#  ./create_time_avg $seconds_start $seconds_end $ipt_dir $t_avg
#
#  path_prefix  = path to master directory
#  ipt_dir = path of input directory wrt master
#  t_avg =   time period of average in seconds
#
#
##################################################################################
# DEFAULTS

echo '***************start create_time_avg*********************'
path_prefix=${1%/}
ipt_dir=${2%/}
opt_dir=${3%/}
t_avg=${4}
full_pdf=${5}
domain=${6}
base_date=${7}
search_date=${8}

echo 'search_date'
echo $search_date


base_string=$(python2.7 -c "from datetime import datetime;print datetime.strptime('${base_date}','%Y%m%d').strftime('%Y-%m-%d')")
if [ "${domain}" == "full" ];then
    opt_dir=${opt_dir%/}/pdf_${t_avg}hr/
else
    opt_dir=${opt_dir%/}/domain_avg_${t_avg}hr/
fi

mkdir -p ${opt_dir}

echo 'optdir'
echo $opt_dir

###################################################################################
# Some settings we don't bother passing in. Hopefully changing these will still
# allow other subroutines to work.

timeavg_suffix="_${t_avg}hr_pdf"		# suffix to time averaged files


###################################################################################


seconds_start=0
seconds_end=0


# find the date stamps for the min and max times. ##################################################
echo 'ipt_dir'
echo $ipt_dir
# put file names in a file
ls ${ipt_dir%/}/*${search_date}* > file_list.tmp
i=0
{ while read myline;do
   
   file_list[$i]=$myline
   echo 'file_list'
   echo $file_list
   i=$(($i+1))
done } < file_list.tmp


if [  "$(command -v gdate 2> /dev/null)" ];then
    cmd='gdate'
else
    cmd='date'
fi

if [[ ${#file_list} -ne 0 ]]
then
   echo 'date1'
   echo ${#date}
   unset date
   i=0
   while [[ ${#date} -eq 0 ]]
   do

      date=$(echo ${file_list[$i]} | sed -n 's/.*\([0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\)_\([0-9][0-9][0-9][0-9]\).*/\1/p')
      time=$(echo ${file_list[$i]} | sed -n 's/.*\([0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\)_\([0-9][0-9][0-9][0-9]\).*/\2/p')
      i=$(($i+1))
      date_first=$date
      file_first=${file_list[$i]}
   done
   
   seconds=$($cmd -u -d "${date} ${time}" +%s )
   seconds_start=$seconds

   unset date
   i=1
   echo 'date2'
   echo ${#date}

   while [[ ${#date} -eq 0 ]]
   do	 
      date=$(echo ${file_list[$((${#file_list[@]}-$i))]} | sed -n 's/.*\([0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\)_\([0-9][0-9][0-9][0-9]\).*/\1/p')
      time=$(echo ${file_list[$((${#file_list[@]}-$i))]} | sed -n 's/.*\([0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\)_\([0-9][0-9][0-9][0-9]\).*/\2/p')
      i=$(($i+1))
  done
         
   seconds=$($cmd -u -d "${date} ${time}" +%s )
   seconds_end=$seconds
fi
unset file_list

day_start=$($cmd -u -d @$(($seconds_start)) +%Y%m%d )
day_end=$($cmd -u -d @$(($seconds_end)) +%Y%m%d )

#################################################################################################################

echo "making $t_avg hourly averaged data"
echo "for times between:"
echo $day_start $day_end



# convert time avg to seconds
t_avg=$t_avg*3600

seconds=$($cmd -u -d "${day_start} 0000" +%s )

while [ $((seconds)) -le $seconds_end ]; do


   i=0

   seconds_min=$((seconds-t_avg/2+60))
   seconds_max=$((seconds+t_avg/2))
   
   # date stamp that we give to the average file
   t_centre=$($cmd -u -d @$((seconds)) +%Y%m%d_%H%M )


    # search both possible days over which avg time may span
    day_min=$($cmd -u -d @$(($seconds_max-86400)) +%Y%m%d )
    day_max=$($cmd -u -d @$(($seconds_max)) +%Y%m%d )
      
    # make file
    declare -a min=$(fgrep $day_min file_list.tmp)
    declare -a max=$(fgrep $day_max file_list.tmp)
    file=( "${min[@]}" "${max[@]}" )

    timeavgfile="${ipt_dir%/}/${file_first%${date_first}*.nc}${t_centre}${timeavg_suffix}.nc"
    timeavgfile=${timeavgfile##*/}
    timeavgfile=${opt_dir%/}/${timeavgfile}
    
    let seconds=seconds+$t_avg

   if [[ -f ${timeavgfile} ]]
   then
      echo "avg file for period $t_centre already exists"
   else
      
      # get filenames of 10 minute files we want to include
      for file in $(grep "$day_min" file_list.tmp )  $(grep "$day_max" file_list.tmp);do
      

         thedate=$(echo ${file} | sed 's/.*\([0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\)_\([0-9][0-9][0-9][0-9]\).*/\1/')
         thetime=$(echo ${file} | sed 's/.*\([0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\)_\([0-9][0-9][0-9][0-9]\).*/\2/')
  
         seconds_in=$($cmd -u -d "${thedate} ${thetime}" +%s )
        
         if [[ $seconds_in -le $seconds_max && $seconds_in -ge $seconds_min ]];then
            file_in[i]=${file}
	    
            t_in[i]=${thedate}_${thetime}
 	        let i=i+1
         fi
	
      done 
   
      # if there is too much missing data
      # don't create an average
      if [ $i -eq 0 ]
      then
      
            echo "no input files to read for averaging period: $t_centre"

      else
          #  Do the averaging
          echo "creating time $domain averaged file for period $t_centre" 
          seconds_day=$($cmd -u -d "${base_date} 0000" +%s )
          day_time=$((seconds-seconds_day)) 
	  
	  # a simple average of all files
         ncea -O ${file_in[@]} "$timeavgfile" 
	     ncwa -O -a "time" "$timeavgfile" "$timeavgfile"
	  
	  # add in a variable telling us about how many scans were used       
          ncap  -O -s "num_radar_scans=$i" -s "time=($day_time^1)/86400" "$timeavgfile" "$timeavgfile"
	  
	  

	  # neaten up some attributes
          ncatted -a input_files,num_radar_scans,o,c,"${t_in[*]}" $timeavgfile
          ncatted -a units,time,o,c,"days since ${base_string} 00:00:00" $timeavgfile
          ncatted -a long_name,time,o,c,"time" $timeavgfile
          ncatted -a units,rain_rate,o,c,"mm/hr" $timeavgfile
          ncatted -a long_name,rain_rate,o,c,"avg three hourly rain rate" $timeavgfile

          if [ $full_pdf -eq 1 ]
          then
             ncatted -a long_name,rain_rate_pdf,o,c,"avg 3 hr rain rate pdf" $timeavgfile
             ncatted -a units,rain_rate_pdf,o,c,"mm/hr" $timeavgfile
          fi

          ncatted -a nco_openmp_thread_number,global,d,, ${timeavgfile}
          ncatted -a history,global,o,c,"Domain averaged and temporarly averaged to three hours by radar_error_all" -h ${timeavgfile}
     
      fi
      unset file_in
      unset t_in


   fi

done
rm file_list.tmp

